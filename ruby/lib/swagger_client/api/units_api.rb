=begin
#QuantiModo

#QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class UnitsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get unit categories
    # Get a list of the categories of measurement units such as 'Distance', 'Duration', 'Energy', 'Frequency', 'Miscellany', 'Pressure', 'Proportion', 'Rating', 'Temperature', 'Volume', and 'Weight'.
    # @param [Hash] opts the optional parameters
    # @return [UnitCategory]
    def v1_unit_categories_get(opts = {})
      data, _status_code, _headers = v1_unit_categories_get_with_http_info(opts)
      return data
    end

    # Get unit categories
    # Get a list of the categories of measurement units such as &#39;Distance&#39;, &#39;Duration&#39;, &#39;Energy&#39;, &#39;Frequency&#39;, &#39;Miscellany&#39;, &#39;Pressure&#39;, &#39;Proportion&#39;, &#39;Rating&#39;, &#39;Temperature&#39;, &#39;Volume&#39;, and &#39;Weight&#39;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCategory, Fixnum, Hash)>] UnitCategory data, response status code and response headers
    def v1_unit_categories_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UnitsApi.v1_unit_categories_get ..."
      end
      # resource path
      local_var_path = "/v1/unitCategories".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'quantimodo_oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UnitCategory')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitsApi#v1_unit_categories_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all available units
    # Get all available units
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @option opts [Integer] :id Unit id
    # @option opts [String] :unit_name Unit name
    # @option opts [String] :unit_abbreviated_name Restrict the results to a specific unit by providing the unit abbreviation.
    # @option opts [String] :unit_category_name Restrict the results to a specific unit category by providing the unit category name.
    # @return [Array<Unit>]
    def v1_units_get(opts = {})
      data, _status_code, _headers = v1_units_get_with_http_info(opts)
      return data
    end

    # Get all available units
    # Get all available units
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @option opts [Integer] :id Unit id
    # @option opts [String] :unit_name Unit name
    # @option opts [String] :unit_abbreviated_name Restrict the results to a specific unit by providing the unit abbreviation.
    # @option opts [String] :unit_category_name Restrict the results to a specific unit category by providing the unit category name.
    # @return [Array<(Array<Unit>, Fixnum, Hash)>] Array<Unit> data, response status code and response headers
    def v1_units_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UnitsApi.v1_units_get ..."
      end
      # resource path
      local_var_path = "/v1/units".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'access_token'] = opts[:'access_token'] if !opts[:'access_token'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'unitName'] = opts[:'unit_name'] if !opts[:'unit_name'].nil?
      query_params[:'unitAbbreviatedName'] = opts[:'unit_abbreviated_name'] if !opts[:'unit_abbreviated_name'].nil?
      query_params[:'unitCategoryName'] = opts[:'unit_category_name'] if !opts[:'unit_category_name'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'quantimodo_oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Unit>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitsApi#v1_units_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Units for Variable
    # Get a list of all possible units to use for a given variable
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @option opts [String] :unit_name Name of Unit you want to retrieve
    # @option opts [String] :unit_abbreviated_name Abbreviated Unit Name of the unit you want
    # @option opts [String] :unit_category_name Name of the category you want units for
    # @option opts [String] :variable Name of the variable you want units for
    # @return [Array<Unit>]
    def v1_units_variable_get(opts = {})
      data, _status_code, _headers = v1_units_variable_get_with_http_info(opts)
      return data
    end

    # Units for Variable
    # Get a list of all possible units to use for a given variable
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @option opts [String] :unit_name Name of Unit you want to retrieve
    # @option opts [String] :unit_abbreviated_name Abbreviated Unit Name of the unit you want
    # @option opts [String] :unit_category_name Name of the category you want units for
    # @option opts [String] :variable Name of the variable you want units for
    # @return [Array<(Array<Unit>, Fixnum, Hash)>] Array<Unit> data, response status code and response headers
    def v1_units_variable_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UnitsApi.v1_units_variable_get ..."
      end
      # resource path
      local_var_path = "/v1/unitsVariable".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'access_token'] = opts[:'access_token'] if !opts[:'access_token'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'unitName'] = opts[:'unit_name'] if !opts[:'unit_name'].nil?
      query_params[:'unitAbbreviatedName'] = opts[:'unit_abbreviated_name'] if !opts[:'unit_abbreviated_name'].nil?
      query_params[:'unitCategoryName'] = opts[:'unit_category_name'] if !opts[:'unit_category_name'].nil?
      query_params[:'variable'] = opts[:'variable'] if !opts[:'variable'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'quantimodo_oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Unit>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitsApi#v1_units_variable_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
