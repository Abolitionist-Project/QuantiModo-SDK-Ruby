=begin
#QuantiModo

#QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class TagsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Delete user tag or ingredient
    # Delete previously created user tags or ingredients.
    # @param tagged_variable_id This is the id of the variable being tagged with an ingredient or something.
    # @param tag_variable_id This is the id of the ingredient variable whose value is determined based on the value of the tagged variable.
    # @param [Hash] opts the optional parameters
    # @return [CommonResponse]
    def v1_user_tags_delete_post(tagged_variable_id, tag_variable_id, opts = {})
      data, _status_code, _headers = v1_user_tags_delete_post_with_http_info(tagged_variable_id, tag_variable_id, opts)
      return data
    end

    # Delete user tag or ingredient
    # Delete previously created user tags or ingredients.
    # @param tagged_variable_id This is the id of the variable being tagged with an ingredient or something.
    # @param tag_variable_id This is the id of the ingredient variable whose value is determined based on the value of the tagged variable.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CommonResponse, Fixnum, Hash)>] CommonResponse data, response status code and response headers
    def v1_user_tags_delete_post_with_http_info(tagged_variable_id, tag_variable_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TagsApi.v1_user_tags_delete_post ..."
      end
      # verify the required parameter 'tagged_variable_id' is set
      fail ArgumentError, "Missing the required parameter 'tagged_variable_id' when calling TagsApi.v1_user_tags_delete_post" if tagged_variable_id.nil?
      # verify the required parameter 'tag_variable_id' is set
      fail ArgumentError, "Missing the required parameter 'tag_variable_id' when calling TagsApi.v1_user_tags_delete_post" if tag_variable_id.nil?
      # resource path
      local_var_path = "/v1/userTags/delete".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'taggedVariableId'] = tagged_variable_id
      query_params[:'tagVariableId'] = tag_variable_id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'quantimodo_oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommonResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagsApi#v1_user_tags_delete_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Post or update user tags or ingredients
    # This endpoint allows users to tag foods with their ingredients.  This information will then be used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
    # @param body Contains the new user tag data
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @return [CommonResponse]
    def v1_user_tags_post(body, opts = {})
      data, _status_code, _headers = v1_user_tags_post_with_http_info(body, opts)
      return data
    end

    # Post or update user tags or ingredients
    # This endpoint allows users to tag foods with their ingredients.  This information will then be used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
    # @param body Contains the new user tag data
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @return [Array<(CommonResponse, Fixnum, Hash)>] CommonResponse data, response status code and response headers
    def v1_user_tags_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TagsApi.v1_user_tags_post ..."
      end
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling TagsApi.v1_user_tags_post" if body.nil?
      # resource path
      local_var_path = "/v1/userTags".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'access_token'] = opts[:'access_token'] if !opts[:'access_token'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['access_token', 'quantimodo_oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommonResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TagsApi#v1_user_tags_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
