=begin
#QuantiModo

#QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class ConnectorsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Mobile connect page
    # This page is designed to be opened in a webview.  Instead of using popup authentication boxes, it uses redirection. You can include the user's access_token as a URL parameter like https://app.quantimo.do/api/v1/connect/mobile?access_token=123
    # @param access_token User OAuth access token
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :user_id User&#39;s id
    # @return [nil]
    def v1_connect_mobile_get(access_token, opts = {})
      v1_connect_mobile_get_with_http_info(access_token, opts)
      return nil
    end

    # Mobile connect page
    # This page is designed to be opened in a webview.  Instead of using popup authentication boxes, it uses redirection. You can include the user&#39;s access_token as a URL parameter like https://app.quantimo.do/api/v1/connect/mobile?access_token&#x3D;123
    # @param access_token User OAuth access token
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :user_id User&#39;s id
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v1_connect_mobile_get_with_http_info(access_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConnectorsApi.v1_connect_mobile_get ..."
      end
      # verify the required parameter 'access_token' is set
      fail ArgumentError, "Missing the required parameter 'access_token' when calling ConnectorsApi.v1_connect_mobile_get" if access_token.nil?
      # resource path
      local_var_path = "/v1/connect/mobile".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'access_token'] = access_token
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/html']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectorsApi#v1_connect_mobile_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Obtain a token from 3rd party data source
    # Attempt to obtain a token from the data provider, store it in the database. With this, the connector to continue to obtain new user data until the token is revoked.
    # @param connector_name Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @return [nil]
    def v1_connectors_connector_name_connect_get(connector_name, opts = {})
      v1_connectors_connector_name_connect_get_with_http_info(connector_name, opts)
      return nil
    end

    # Obtain a token from 3rd party data source
    # Attempt to obtain a token from the data provider, store it in the database. With this, the connector to continue to obtain new user data until the token is revoked.
    # @param connector_name Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v1_connectors_connector_name_connect_get_with_http_info(connector_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConnectorsApi.v1_connectors_connector_name_connect_get ..."
      end
      # verify the required parameter 'connector_name' is set
      fail ArgumentError, "Missing the required parameter 'connector_name' when calling ConnectorsApi.v1_connectors_connector_name_connect_get" if connector_name.nil?
      # resource path
      local_var_path = "/v1/connectors/{connectorName}/connect".sub('{format}','json').sub('{' + 'connectorName' + '}', connector_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'access_token'] = opts[:'access_token'] if !opts[:'access_token'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'quantimodo_oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectorsApi#v1_connectors_connector_name_connect_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Connection Instructions
    # Returns instructions that describe what parameters and endpoint to use to connect to the given data provider.
    # @param connector_name Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
    # @param parameters JSON Array of Parameters for the request to enable connector.
    # @param url URL which should be used to enable the connector.
    # @param use_popup Should use popup when enabling connector
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @return [nil]
    def v1_connectors_connector_name_connect_instructions_get(connector_name, parameters, url, use_popup, opts = {})
      v1_connectors_connector_name_connect_instructions_get_with_http_info(connector_name, parameters, url, use_popup, opts)
      return nil
    end

    # Connection Instructions
    # Returns instructions that describe what parameters and endpoint to use to connect to the given data provider.
    # @param connector_name Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
    # @param parameters JSON Array of Parameters for the request to enable connector.
    # @param url URL which should be used to enable the connector.
    # @param use_popup Should use popup when enabling connector
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v1_connectors_connector_name_connect_instructions_get_with_http_info(connector_name, parameters, url, use_popup, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConnectorsApi.v1_connectors_connector_name_connect_instructions_get ..."
      end
      # verify the required parameter 'connector_name' is set
      fail ArgumentError, "Missing the required parameter 'connector_name' when calling ConnectorsApi.v1_connectors_connector_name_connect_instructions_get" if connector_name.nil?
      # verify the required parameter 'parameters' is set
      fail ArgumentError, "Missing the required parameter 'parameters' when calling ConnectorsApi.v1_connectors_connector_name_connect_instructions_get" if parameters.nil?
      # verify the required parameter 'url' is set
      fail ArgumentError, "Missing the required parameter 'url' when calling ConnectorsApi.v1_connectors_connector_name_connect_instructions_get" if url.nil?
      # verify the required parameter 'use_popup' is set
      fail ArgumentError, "Missing the required parameter 'use_popup' when calling ConnectorsApi.v1_connectors_connector_name_connect_instructions_get" if use_popup.nil?
      # resource path
      local_var_path = "/v1/connectors/{connectorName}/connectInstructions".sub('{format}','json').sub('{' + 'connectorName' + '}', connector_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'parameters'] = parameters
      query_params[:'url'] = url
      query_params[:'usePopup'] = use_popup
      query_params[:'access_token'] = opts[:'access_token'] if !opts[:'access_token'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'quantimodo_oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectorsApi#v1_connectors_connector_name_connect_instructions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Connect Parameter
    # Returns instructions that describe what parameters and endpoint to use to connect to the given data provider.
    # @param connector_name Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
    # @param display_name Name of the parameter that is user visible in the form
    # @param key Name of the property that the user has to enter such as username or password Connector (used in HTTP request)
    # @param placeholder Placeholder hint value for the parameter input tag.
    # @param type Type of input field such as those found here http://www.w3schools.com/tags/tag_input.asp
    # @param use_popup Should use popup when enabling connector
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @option opts [String] :default_value Default parameter value
    # @return [ConnectorInstruction]
    def v1_connectors_connector_name_connect_parameter_get(connector_name, display_name, key, placeholder, type, use_popup, opts = {})
      data, _status_code, _headers = v1_connectors_connector_name_connect_parameter_get_with_http_info(connector_name, display_name, key, placeholder, type, use_popup, opts)
      return data
    end

    # Connect Parameter
    # Returns instructions that describe what parameters and endpoint to use to connect to the given data provider.
    # @param connector_name Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
    # @param display_name Name of the parameter that is user visible in the form
    # @param key Name of the property that the user has to enter such as username or password Connector (used in HTTP request)
    # @param placeholder Placeholder hint value for the parameter input tag.
    # @param type Type of input field such as those found here http://www.w3schools.com/tags/tag_input.asp
    # @param use_popup Should use popup when enabling connector
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @option opts [String] :default_value Default parameter value
    # @return [Array<(ConnectorInstruction, Fixnum, Hash)>] ConnectorInstruction data, response status code and response headers
    def v1_connectors_connector_name_connect_parameter_get_with_http_info(connector_name, display_name, key, placeholder, type, use_popup, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConnectorsApi.v1_connectors_connector_name_connect_parameter_get ..."
      end
      # verify the required parameter 'connector_name' is set
      fail ArgumentError, "Missing the required parameter 'connector_name' when calling ConnectorsApi.v1_connectors_connector_name_connect_parameter_get" if connector_name.nil?
      # verify the required parameter 'display_name' is set
      fail ArgumentError, "Missing the required parameter 'display_name' when calling ConnectorsApi.v1_connectors_connector_name_connect_parameter_get" if display_name.nil?
      # verify the required parameter 'key' is set
      fail ArgumentError, "Missing the required parameter 'key' when calling ConnectorsApi.v1_connectors_connector_name_connect_parameter_get" if key.nil?
      # verify the required parameter 'placeholder' is set
      fail ArgumentError, "Missing the required parameter 'placeholder' when calling ConnectorsApi.v1_connectors_connector_name_connect_parameter_get" if placeholder.nil?
      # verify the required parameter 'type' is set
      fail ArgumentError, "Missing the required parameter 'type' when calling ConnectorsApi.v1_connectors_connector_name_connect_parameter_get" if type.nil?
      # verify the required parameter 'use_popup' is set
      fail ArgumentError, "Missing the required parameter 'use_popup' when calling ConnectorsApi.v1_connectors_connector_name_connect_parameter_get" if use_popup.nil?
      # resource path
      local_var_path = "/v1/connectors/{connectorName}/connectParameter".sub('{format}','json').sub('{' + 'connectorName' + '}', connector_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'displayName'] = display_name
      query_params[:'key'] = key
      query_params[:'placeholder'] = placeholder
      query_params[:'type'] = type
      query_params[:'usePopup'] = use_popup
      query_params[:'access_token'] = opts[:'access_token'] if !opts[:'access_token'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'defaultValue'] = opts[:'default_value'] if !opts[:'default_value'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'quantimodo_oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConnectorInstruction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectorsApi#v1_connectors_connector_name_connect_parameter_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete stored connection info
    # The disconnect method deletes any stored tokens or connection information from the connectors database.
    # @param connector_name Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v1_connectors_connector_name_disconnect_get(connector_name, opts = {})
      v1_connectors_connector_name_disconnect_get_with_http_info(connector_name, opts)
      return nil
    end

    # Delete stored connection info
    # The disconnect method deletes any stored tokens or connection information from the connectors database.
    # @param connector_name Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v1_connectors_connector_name_disconnect_get_with_http_info(connector_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConnectorsApi.v1_connectors_connector_name_disconnect_get ..."
      end
      # verify the required parameter 'connector_name' is set
      fail ArgumentError, "Missing the required parameter 'connector_name' when calling ConnectorsApi.v1_connectors_connector_name_disconnect_get" if connector_name.nil?
      # resource path
      local_var_path = "/v1/connectors/{connectorName}/disconnect".sub('{format}','json').sub('{' + 'connectorName' + '}', connector_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'quantimodo_oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectorsApi#v1_connectors_connector_name_disconnect_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get connector info for user
    # Returns information about the connector such as the connector id, whether or not is connected for this user (i.e. we have a token or credentials), and its update history for the user.
    # @param connector_name Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @return [ConnectorInfo]
    def v1_connectors_connector_name_info_get(connector_name, opts = {})
      data, _status_code, _headers = v1_connectors_connector_name_info_get_with_http_info(connector_name, opts)
      return data
    end

    # Get connector info for user
    # Returns information about the connector such as the connector id, whether or not is connected for this user (i.e. we have a token or credentials), and its update history for the user.
    # @param connector_name Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @return [Array<(ConnectorInfo, Fixnum, Hash)>] ConnectorInfo data, response status code and response headers
    def v1_connectors_connector_name_info_get_with_http_info(connector_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConnectorsApi.v1_connectors_connector_name_info_get ..."
      end
      # verify the required parameter 'connector_name' is set
      fail ArgumentError, "Missing the required parameter 'connector_name' when calling ConnectorsApi.v1_connectors_connector_name_info_get" if connector_name.nil?
      # resource path
      local_var_path = "/v1/connectors/{connectorName}/info".sub('{format}','json').sub('{' + 'connectorName' + '}', connector_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'access_token'] = opts[:'access_token'] if !opts[:'access_token'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'quantimodo_oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConnectorInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectorsApi#v1_connectors_connector_name_info_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sync with data source
    # The update method tells the QM Connector Framework to check with the data provider (such as Fitbit or MyFitnessPal) and retrieve any new measurements available.
    # @param connector_name Lowercase system name of the source application or device
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @return [nil]
    def v1_connectors_connector_name_update_get(connector_name, opts = {})
      v1_connectors_connector_name_update_get_with_http_info(connector_name, opts)
      return nil
    end

    # Sync with data source
    # The update method tells the QM Connector Framework to check with the data provider (such as Fitbit or MyFitnessPal) and retrieve any new measurements available.
    # @param connector_name Lowercase system name of the source application or device
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v1_connectors_connector_name_update_get_with_http_info(connector_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConnectorsApi.v1_connectors_connector_name_update_get ..."
      end
      # verify the required parameter 'connector_name' is set
      fail ArgumentError, "Missing the required parameter 'connector_name' when calling ConnectorsApi.v1_connectors_connector_name_update_get" if connector_name.nil?
      # resource path
      local_var_path = "/v1/connectors/{connectorName}/update".sub('{format}','json').sub('{' + 'connectorName' + '}', connector_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'access_token'] = opts[:'access_token'] if !opts[:'access_token'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'quantimodo_oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectorsApi#v1_connectors_connector_name_update_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List of Connectors
    # A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
    # @param [Hash] opts the optional parameters
    # @return [Array<Connector>]
    def v1_connectors_list_get(opts = {})
      data, _status_code, _headers = v1_connectors_list_get_with_http_info(opts)
      return data
    end

    # List of Connectors
    # A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Connector>, Fixnum, Hash)>] Array<Connector> data, response status code and response headers
    def v1_connectors_list_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConnectorsApi.v1_connectors_list_get ..."
      end
      # resource path
      local_var_path = "/v1/connectors/list".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'quantimodo_oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Connector>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectorsApi#v1_connectors_list_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get embeddable connect javascript
    # Get embeddable connect javascript. Usage:   - Embedding in applications with popups for 3rd-party authentication windows.     Use `qmSetupInPopup` function after connecting `connect.js`.   - Embedding in applications with popups for 3rd-party authentication windows.     Requires a selector to block. It will be embedded in this block.     Use `qmSetupOnPage` function after connecting `connect.js`.   - Embedding in mobile applications without popups for 3rd-party authentication.     Use `qmSetupOnMobile` function after connecting `connect.js`.     If using in a Cordova application call  `qmSetupOnIonic` function after connecting `connect.js`.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @return [nil]
    def v1_integration_js_get(opts = {})
      v1_integration_js_get_with_http_info(opts)
      return nil
    end

    # Get embeddable connect javascript
    # Get embeddable connect javascript. Usage:   - Embedding in applications with popups for 3rd-party authentication windows.     Use &#x60;qmSetupInPopup&#x60; function after connecting &#x60;connect.js&#x60;.   - Embedding in applications with popups for 3rd-party authentication windows.     Requires a selector to block. It will be embedded in this block.     Use &#x60;qmSetupOnPage&#x60; function after connecting &#x60;connect.js&#x60;.   - Embedding in mobile applications without popups for 3rd-party authentication.     Use &#x60;qmSetupOnMobile&#x60; function after connecting &#x60;connect.js&#x60;.     If using in a Cordova application call  &#x60;qmSetupOnIonic&#x60; function after connecting &#x60;connect.js&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v1_integration_js_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConnectorsApi.v1_integration_js_get ..."
      end
      # resource path
      local_var_path = "/v1/integration.js".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'access_token'] = opts[:'access_token'] if !opts[:'access_token'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/x-javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectorsApi#v1_integration_js_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
