=begin
#QuantiModo

#QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class PairsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get pairs
    # Pairs cause measurements with effect measurements grouped over the duration of action after the onset delay.
    # @param cause Original variable name for the explanatory or independent variable
    # @param effect Original variable name for the outcome or dependent variable
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @option opts [String] :cause_source Name of data source that the cause measurements should come from
    # @option opts [String] :cause_unit Abbreviated name for the unit cause measurements to be returned in
    # @option opts [String] :delay The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
    # @option opts [String] :duration The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.
    # @option opts [String] :effect_source Name of data source that the effectmeasurements should come from
    # @option opts [String] :effect_unit Abbreviated name for the unit effect measurements to be returned in
    # @option opts [String] :end_time The most recent date (in epoch time) for which we should return measurements
    # @option opts [String] :start_time The earliest date (in epoch time) for which we should return measurements
    # @option opts [Integer] :limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
    # @option opts [Integer] :offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
    # @option opts [Integer] :sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
    # @return [Array<Pairs>]
    def v1_pairs_csv_get(cause, effect, opts = {})
      data, _status_code, _headers = v1_pairs_csv_get_with_http_info(cause, effect, opts)
      return data
    end

    # Get pairs
    # Pairs cause measurements with effect measurements grouped over the duration of action after the onset delay.
    # @param cause Original variable name for the explanatory or independent variable
    # @param effect Original variable name for the outcome or dependent variable
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @option opts [String] :cause_source Name of data source that the cause measurements should come from
    # @option opts [String] :cause_unit Abbreviated name for the unit cause measurements to be returned in
    # @option opts [String] :delay The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
    # @option opts [String] :duration The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.
    # @option opts [String] :effect_source Name of data source that the effectmeasurements should come from
    # @option opts [String] :effect_unit Abbreviated name for the unit effect measurements to be returned in
    # @option opts [String] :end_time The most recent date (in epoch time) for which we should return measurements
    # @option opts [String] :start_time The earliest date (in epoch time) for which we should return measurements
    # @option opts [Integer] :limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
    # @option opts [Integer] :offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
    # @option opts [Integer] :sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
    # @return [Array<(Array<Pairs>, Fixnum, Hash)>] Array<Pairs> data, response status code and response headers
    def v1_pairs_csv_get_with_http_info(cause, effect, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PairsApi.v1_pairs_csv_get ..."
      end
      # verify the required parameter 'cause' is set
      fail ArgumentError, "Missing the required parameter 'cause' when calling PairsApi.v1_pairs_csv_get" if cause.nil?
      # verify the required parameter 'effect' is set
      fail ArgumentError, "Missing the required parameter 'effect' when calling PairsApi.v1_pairs_csv_get" if effect.nil?
      # resource path
      local_var_path = "/v1/pairsCsv".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'cause'] = cause
      query_params[:'effect'] = effect
      query_params[:'access_token'] = opts[:'access_token'] if !opts[:'access_token'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'causeSource'] = opts[:'cause_source'] if !opts[:'cause_source'].nil?
      query_params[:'causeUnit'] = opts[:'cause_unit'] if !opts[:'cause_unit'].nil?
      query_params[:'delay'] = opts[:'delay'] if !opts[:'delay'].nil?
      query_params[:'duration'] = opts[:'duration'] if !opts[:'duration'].nil?
      query_params[:'effectSource'] = opts[:'effect_source'] if !opts[:'effect_source'].nil?
      query_params[:'effectUnit'] = opts[:'effect_unit'] if !opts[:'effect_unit'].nil?
      query_params[:'endTime'] = opts[:'end_time'] if !opts[:'end_time'].nil?
      query_params[:'startTime'] = opts[:'start_time'] if !opts[:'start_time'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'quantimodo_oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Pairs>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PairsApi#v1_pairs_csv_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pairs
    # Pairs cause measurements with effect measurements grouped over the duration of action after the onset delay.
    # @param cause Original variable name for the explanatory or independent variable
    # @param effect Original variable name for the outcome or dependent variable
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @option opts [String] :cause_source Name of data source that the cause measurements should come from
    # @option opts [String] :cause_unit Abbreviated name for the unit cause measurements to be returned in
    # @option opts [String] :delay The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
    # @option opts [String] :duration The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.
    # @option opts [String] :effect_source Name of data source that the effectmeasurements should come from
    # @option opts [String] :effect_unit Abbreviated name for the unit effect measurements to be returned in
    # @option opts [String] :end_time The most recent date (in epoch time) for which we should return measurements
    # @option opts [String] :start_time The earliest date (in epoch time) for which we should return measurements
    # @option opts [Integer] :limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
    # @option opts [Integer] :offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
    # @option opts [Integer] :sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
    # @return [Array<Pairs>]
    def v1_pairs_get(cause, effect, opts = {})
      data, _status_code, _headers = v1_pairs_get_with_http_info(cause, effect, opts)
      return data
    end

    # Get pairs
    # Pairs cause measurements with effect measurements grouped over the duration of action after the onset delay.
    # @param cause Original variable name for the explanatory or independent variable
    # @param effect Original variable name for the outcome or dependent variable
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @option opts [String] :cause_source Name of data source that the cause measurements should come from
    # @option opts [String] :cause_unit Abbreviated name for the unit cause measurements to be returned in
    # @option opts [String] :delay The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
    # @option opts [String] :duration The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.
    # @option opts [String] :effect_source Name of data source that the effectmeasurements should come from
    # @option opts [String] :effect_unit Abbreviated name for the unit effect measurements to be returned in
    # @option opts [String] :end_time The most recent date (in epoch time) for which we should return measurements
    # @option opts [String] :start_time The earliest date (in epoch time) for which we should return measurements
    # @option opts [Integer] :limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
    # @option opts [Integer] :offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
    # @option opts [Integer] :sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
    # @return [Array<(Array<Pairs>, Fixnum, Hash)>] Array<Pairs> data, response status code and response headers
    def v1_pairs_get_with_http_info(cause, effect, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PairsApi.v1_pairs_get ..."
      end
      # verify the required parameter 'cause' is set
      fail ArgumentError, "Missing the required parameter 'cause' when calling PairsApi.v1_pairs_get" if cause.nil?
      # verify the required parameter 'effect' is set
      fail ArgumentError, "Missing the required parameter 'effect' when calling PairsApi.v1_pairs_get" if effect.nil?
      # resource path
      local_var_path = "/v1/pairs".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'cause'] = cause
      query_params[:'effect'] = effect
      query_params[:'access_token'] = opts[:'access_token'] if !opts[:'access_token'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'causeSource'] = opts[:'cause_source'] if !opts[:'cause_source'].nil?
      query_params[:'causeUnit'] = opts[:'cause_unit'] if !opts[:'cause_unit'].nil?
      query_params[:'delay'] = opts[:'delay'] if !opts[:'delay'].nil?
      query_params[:'duration'] = opts[:'duration'] if !opts[:'duration'].nil?
      query_params[:'effectSource'] = opts[:'effect_source'] if !opts[:'effect_source'].nil?
      query_params[:'effectUnit'] = opts[:'effect_unit'] if !opts[:'effect_unit'].nil?
      query_params[:'endTime'] = opts[:'end_time'] if !opts[:'end_time'].nil?
      query_params[:'startTime'] = opts[:'start_time'] if !opts[:'start_time'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'quantimodo_oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Pairs>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PairsApi#v1_pairs_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
