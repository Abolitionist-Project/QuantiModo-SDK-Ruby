=begin
#QuantiModo

#QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class CorrelationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get aggregated correlations
    # Get correlations based on the anonymized aggregate data from all QuantiModo users.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @option opts [String] :effect Variable name of the effect variable for which the user desires correlations
    # @option opts [String] :cause Variable name of the cause variable for which the user desires correlations
    # @option opts [String] :correlation_coefficient Pearson correlation coefficient between cause and effect after lagging by onset delay and grouping by duration of action
    # @option opts [String] :onset_delay The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
    # @option opts [String] :duration_of_action The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.
    # @option opts [String] :updated_at The time that this measurement was last updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;.  Generally, you&#39;ll be retrieving new or updated user data. To avoid unnecessary API calls, you&#39;ll want to store your last refresh time locally. Then whenever you make a request to get new data, you should limit the returned results to those updated since your last refresh by appending append &#x60;?updatedAt&#x3D;(ge)2013-01-D01T01:01:01 to your request.
    # @option opts [Integer] :limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
    # @option opts [Integer] :offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
    # @option opts [Integer] :sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
    # @option opts [BOOLEAN] :outcomes_of_interest Only include correlations for which the effect is an outcome of interest for the user
    # @return [Array<Correlation>]
    def v1_aggregated_correlations_get(opts = {})
      data, _status_code, _headers = v1_aggregated_correlations_get_with_http_info(opts)
      return data
    end

    # Get aggregated correlations
    # Get correlations based on the anonymized aggregate data from all QuantiModo users.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @option opts [String] :effect Variable name of the effect variable for which the user desires correlations
    # @option opts [String] :cause Variable name of the cause variable for which the user desires correlations
    # @option opts [String] :correlation_coefficient Pearson correlation coefficient between cause and effect after lagging by onset delay and grouping by duration of action
    # @option opts [String] :onset_delay The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
    # @option opts [String] :duration_of_action The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.
    # @option opts [String] :updated_at The time that this measurement was last updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;.  Generally, you&#39;ll be retrieving new or updated user data. To avoid unnecessary API calls, you&#39;ll want to store your last refresh time locally. Then whenever you make a request to get new data, you should limit the returned results to those updated since your last refresh by appending append &#x60;?updatedAt&#x3D;(ge)2013-01-D01T01:01:01 to your request.
    # @option opts [Integer] :limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
    # @option opts [Integer] :offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
    # @option opts [Integer] :sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
    # @option opts [BOOLEAN] :outcomes_of_interest Only include correlations for which the effect is an outcome of interest for the user
    # @return [Array<(Array<Correlation>, Fixnum, Hash)>] Array<Correlation> data, response status code and response headers
    def v1_aggregated_correlations_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CorrelationsApi.v1_aggregated_correlations_get ..."
      end
      # resource path
      local_var_path = "/v1/aggregatedCorrelations".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'access_token'] = opts[:'access_token'] if !opts[:'access_token'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'effect'] = opts[:'effect'] if !opts[:'effect'].nil?
      query_params[:'cause'] = opts[:'cause'] if !opts[:'cause'].nil?
      query_params[:'correlationCoefficient'] = opts[:'correlation_coefficient'] if !opts[:'correlation_coefficient'].nil?
      query_params[:'onsetDelay'] = opts[:'onset_delay'] if !opts[:'onset_delay'].nil?
      query_params[:'durationOfAction'] = opts[:'duration_of_action'] if !opts[:'duration_of_action'].nil?
      query_params[:'updatedAt'] = opts[:'updated_at'] if !opts[:'updated_at'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'outcomesOfInterest'] = opts[:'outcomes_of_interest'] if !opts[:'outcomes_of_interest'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'quantimodo_oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Correlation>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CorrelationsApi#v1_aggregated_correlations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Store or Update a Correlation
    # Add correlation
    # @param body Provides correlation data
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @return [nil]
    def v1_aggregated_correlations_post(body, opts = {})
      v1_aggregated_correlations_post_with_http_info(body, opts)
      return nil
    end

    # Store or Update a Correlation
    # Add correlation
    # @param body Provides correlation data
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def v1_aggregated_correlations_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CorrelationsApi.v1_aggregated_correlations_post ..."
      end
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling CorrelationsApi.v1_aggregated_correlations_post" if body.nil?
      # resource path
      local_var_path = "/v1/aggregatedCorrelations".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'access_token'] = opts[:'access_token'] if !opts[:'access_token'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['access_token', 'quantimodo_oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CorrelationsApi#v1_aggregated_correlations_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get correlations
    # Get correlations based on data from a single user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @option opts [String] :effect Variable name of the effect variable for which the user desires correlations
    # @option opts [String] :cause Variable name of the cause variable for which the user desires correlations
    # @option opts [String] :correlation_coefficient Pearson correlation coefficient between cause and effect after lagging by onset delay and grouping by duration of action
    # @option opts [String] :onset_delay The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
    # @option opts [String] :duration_of_action The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.
    # @option opts [String] :updated_at The time that this measurement was last updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;.  Generally, you&#39;ll be retrieving new or updated user data. To avoid unnecessary API calls, you&#39;ll want to store your last refresh time locally. Then whenever you make a request to get new data, you should limit the returned results to those updated since your last refresh by appending append &#x60;?updatedAt&#x3D;(ge)2013-01-D01T01:01:01 to your request.
    # @option opts [Integer] :limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
    # @option opts [Integer] :offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
    # @option opts [Integer] :sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
    # @option opts [BOOLEAN] :outcomes_of_interest Only include correlations for which the effect is an outcome of interest for the user
    # @return [Array<Correlation>]
    def v1_correlations_get(opts = {})
      data, _status_code, _headers = v1_correlations_get_with_http_info(opts)
      return data
    end

    # Get correlations
    # Get correlations based on data from a single user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @option opts [String] :effect Variable name of the effect variable for which the user desires correlations
    # @option opts [String] :cause Variable name of the cause variable for which the user desires correlations
    # @option opts [String] :correlation_coefficient Pearson correlation coefficient between cause and effect after lagging by onset delay and grouping by duration of action
    # @option opts [String] :onset_delay The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
    # @option opts [String] :duration_of_action The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.
    # @option opts [String] :updated_at The time that this measurement was last updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;.  Generally, you&#39;ll be retrieving new or updated user data. To avoid unnecessary API calls, you&#39;ll want to store your last refresh time locally. Then whenever you make a request to get new data, you should limit the returned results to those updated since your last refresh by appending append &#x60;?updatedAt&#x3D;(ge)2013-01-D01T01:01:01 to your request.
    # @option opts [Integer] :limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
    # @option opts [Integer] :offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
    # @option opts [Integer] :sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
    # @option opts [BOOLEAN] :outcomes_of_interest Only include correlations for which the effect is an outcome of interest for the user
    # @return [Array<(Array<Correlation>, Fixnum, Hash)>] Array<Correlation> data, response status code and response headers
    def v1_correlations_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CorrelationsApi.v1_correlations_get ..."
      end
      # resource path
      local_var_path = "/v1/correlations".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'access_token'] = opts[:'access_token'] if !opts[:'access_token'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'effect'] = opts[:'effect'] if !opts[:'effect'].nil?
      query_params[:'cause'] = opts[:'cause'] if !opts[:'cause'].nil?
      query_params[:'correlationCoefficient'] = opts[:'correlation_coefficient'] if !opts[:'correlation_coefficient'].nil?
      query_params[:'onsetDelay'] = opts[:'onset_delay'] if !opts[:'onset_delay'].nil?
      query_params[:'durationOfAction'] = opts[:'duration_of_action'] if !opts[:'duration_of_action'].nil?
      query_params[:'updatedAt'] = opts[:'updated_at'] if !opts[:'updated_at'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'outcomesOfInterest'] = opts[:'outcomes_of_interest'] if !opts[:'outcomes_of_interest'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'quantimodo_oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Correlation>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CorrelationsApi#v1_correlations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search user correlations for a given cause
    # Returns average of all correlations and votes for all user cause variables for a given cause. If parameter \"include_public\" is used, it also returns public correlations. User correlation overwrites or supersedes public correlation.
    # @param organization_id Organization ID
    # @param user_id2 User id
    # @param variable_name Effect variable name
    # @param organization_token Organization access token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @option opts [String] :include_public Include public correlations, Can be \&quot;1\&quot; or empty.
    # @return [Array<Correlation>]
    def v1_organizations_organization_id_users_user_id_variables_variable_name_causes_get(organization_id, user_id2, variable_name, organization_token, opts = {})
      data, _status_code, _headers = v1_organizations_organization_id_users_user_id_variables_variable_name_causes_get_with_http_info(organization_id, user_id2, variable_name, organization_token, opts)
      return data
    end

    # Search user correlations for a given cause
    # Returns average of all correlations and votes for all user cause variables for a given cause. If parameter \&quot;include_public\&quot; is used, it also returns public correlations. User correlation overwrites or supersedes public correlation.
    # @param organization_id Organization ID
    # @param user_id2 User id
    # @param variable_name Effect variable name
    # @param organization_token Organization access token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @option opts [String] :include_public Include public correlations, Can be \&quot;1\&quot; or empty.
    # @return [Array<(Array<Correlation>, Fixnum, Hash)>] Array<Correlation> data, response status code and response headers
    def v1_organizations_organization_id_users_user_id_variables_variable_name_causes_get_with_http_info(organization_id, user_id2, variable_name, organization_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CorrelationsApi.v1_organizations_organization_id_users_user_id_variables_variable_name_causes_get ..."
      end
      # verify the required parameter 'organization_id' is set
      fail ArgumentError, "Missing the required parameter 'organization_id' when calling CorrelationsApi.v1_organizations_organization_id_users_user_id_variables_variable_name_causes_get" if organization_id.nil?
      # verify the required parameter 'user_id2' is set
      fail ArgumentError, "Missing the required parameter 'user_id2' when calling CorrelationsApi.v1_organizations_organization_id_users_user_id_variables_variable_name_causes_get" if user_id2.nil?
      # verify the required parameter 'variable_name' is set
      fail ArgumentError, "Missing the required parameter 'variable_name' when calling CorrelationsApi.v1_organizations_organization_id_users_user_id_variables_variable_name_causes_get" if variable_name.nil?
      # verify the required parameter 'organization_token' is set
      fail ArgumentError, "Missing the required parameter 'organization_token' when calling CorrelationsApi.v1_organizations_organization_id_users_user_id_variables_variable_name_causes_get" if organization_token.nil?
      # resource path
      local_var_path = "/v1/organizations/{organizationId}/users/{userId}/variables/{variableName}/causes".sub('{format}','json').sub('{' + 'organizationId' + '}', organization_id.to_s).sub('{' + 'userId' + '}', user_id2.to_s).sub('{' + 'variableName' + '}', variable_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'organization_token'] = organization_token
      query_params[:'access_token'] = opts[:'access_token'] if !opts[:'access_token'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'includePublic'] = opts[:'include_public'] if !opts[:'include_public'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'quantimodo_oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Correlation>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CorrelationsApi#v1_organizations_organization_id_users_user_id_variables_variable_name_causes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search user correlations for a given cause
    # Returns average of all correlations and votes for all user cause variables for a given effect. If parameter \"include_public\" is used, it also returns public correlations. User correlation overwrites or supersedes public correlation.
    # @param organization_id Organization ID
    # @param user_id2 User id
    # @param variable_name Cause variable name
    # @param organization_token Organization access token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @option opts [String] :include_public Include public correlations, Can be \&quot;1\&quot; or empty.
    # @return [Array<CommonResponse>]
    def v1_organizations_organization_id_users_user_id_variables_variable_name_effects_get(organization_id, user_id2, variable_name, organization_token, opts = {})
      data, _status_code, _headers = v1_organizations_organization_id_users_user_id_variables_variable_name_effects_get_with_http_info(organization_id, user_id2, variable_name, organization_token, opts)
      return data
    end

    # Search user correlations for a given cause
    # Returns average of all correlations and votes for all user cause variables for a given effect. If parameter \&quot;include_public\&quot; is used, it also returns public correlations. User correlation overwrites or supersedes public correlation.
    # @param organization_id Organization ID
    # @param user_id2 User id
    # @param variable_name Cause variable name
    # @param organization_token Organization access token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @option opts [String] :include_public Include public correlations, Can be \&quot;1\&quot; or empty.
    # @return [Array<(Array<CommonResponse>, Fixnum, Hash)>] Array<CommonResponse> data, response status code and response headers
    def v1_organizations_organization_id_users_user_id_variables_variable_name_effects_get_with_http_info(organization_id, user_id2, variable_name, organization_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CorrelationsApi.v1_organizations_organization_id_users_user_id_variables_variable_name_effects_get ..."
      end
      # verify the required parameter 'organization_id' is set
      fail ArgumentError, "Missing the required parameter 'organization_id' when calling CorrelationsApi.v1_organizations_organization_id_users_user_id_variables_variable_name_effects_get" if organization_id.nil?
      # verify the required parameter 'user_id2' is set
      fail ArgumentError, "Missing the required parameter 'user_id2' when calling CorrelationsApi.v1_organizations_organization_id_users_user_id_variables_variable_name_effects_get" if user_id2.nil?
      # verify the required parameter 'variable_name' is set
      fail ArgumentError, "Missing the required parameter 'variable_name' when calling CorrelationsApi.v1_organizations_organization_id_users_user_id_variables_variable_name_effects_get" if variable_name.nil?
      # verify the required parameter 'organization_token' is set
      fail ArgumentError, "Missing the required parameter 'organization_token' when calling CorrelationsApi.v1_organizations_organization_id_users_user_id_variables_variable_name_effects_get" if organization_token.nil?
      # resource path
      local_var_path = "/v1/organizations/{organizationId}/users/{userId}/variables/{variableName}/effects".sub('{format}','json').sub('{' + 'organizationId' + '}', organization_id.to_s).sub('{' + 'userId' + '}', user_id2.to_s).sub('{' + 'variableName' + '}', variable_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'organization_token'] = organization_token
      query_params[:'access_token'] = opts[:'access_token'] if !opts[:'access_token'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'include_public'] = opts[:'include_public'] if !opts[:'include_public'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'quantimodo_oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<CommonResponse>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CorrelationsApi#v1_organizations_organization_id_users_user_id_variables_variable_name_effects_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get average correlations for variables containing search term
    # Returns the average correlations from all users for all public variables that contain the characters in the search query. Returns average of all users public variable correlations with a specified cause or effect.
    # @param search Name of the variable that you want to know the causes or effects of.
    # @param effect_or_cause Setting this to effect indicates that the searched variable is the effect and that the causes of this variable should be returned. cause indicates that the searched variable is the cause and the effects should be returned.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @option opts [BOOLEAN] :outcomes_of_interest Only include correlations for which the effect is an outcome of interest for the user
    # @return [Array<Correlation>]
    def v1_public_correlations_search_search_get(search, effect_or_cause, opts = {})
      data, _status_code, _headers = v1_public_correlations_search_search_get_with_http_info(search, effect_or_cause, opts)
      return data
    end

    # Get average correlations for variables containing search term
    # Returns the average correlations from all users for all public variables that contain the characters in the search query. Returns average of all users public variable correlations with a specified cause or effect.
    # @param search Name of the variable that you want to know the causes or effects of.
    # @param effect_or_cause Setting this to effect indicates that the searched variable is the effect and that the causes of this variable should be returned. cause indicates that the searched variable is the cause and the effects should be returned.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @option opts [BOOLEAN] :outcomes_of_interest Only include correlations for which the effect is an outcome of interest for the user
    # @return [Array<(Array<Correlation>, Fixnum, Hash)>] Array<Correlation> data, response status code and response headers
    def v1_public_correlations_search_search_get_with_http_info(search, effect_or_cause, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CorrelationsApi.v1_public_correlations_search_search_get ..."
      end
      # verify the required parameter 'search' is set
      fail ArgumentError, "Missing the required parameter 'search' when calling CorrelationsApi.v1_public_correlations_search_search_get" if search.nil?
      # verify the required parameter 'effect_or_cause' is set
      fail ArgumentError, "Missing the required parameter 'effect_or_cause' when calling CorrelationsApi.v1_public_correlations_search_search_get" if effect_or_cause.nil?
      # resource path
      local_var_path = "/v1/public/correlations/search/{search}".sub('{format}','json').sub('{' + 'search' + '}', search.to_s)

      # query parameters
      query_params = {}
      query_params[:'effectOrCause'] = effect_or_cause
      query_params[:'access_token'] = opts[:'access_token'] if !opts[:'access_token'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'outcomesOfInterest'] = opts[:'outcomes_of_interest'] if !opts[:'outcomes_of_interest'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'quantimodo_oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Correlation>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CorrelationsApi#v1_public_correlations_search_search_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search user correlations for a given effect
    # Returns average of all correlations and votes for all user cause variables for a given effect
    # @param variable_name Effect variable name
    # @param [Hash] opts the optional parameters
    # @return [Array<Correlation>]
    def v1_variables_variable_name_causes_get(variable_name, opts = {})
      data, _status_code, _headers = v1_variables_variable_name_causes_get_with_http_info(variable_name, opts)
      return data
    end

    # Search user correlations for a given effect
    # Returns average of all correlations and votes for all user cause variables for a given effect
    # @param variable_name Effect variable name
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Correlation>, Fixnum, Hash)>] Array<Correlation> data, response status code and response headers
    def v1_variables_variable_name_causes_get_with_http_info(variable_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CorrelationsApi.v1_variables_variable_name_causes_get ..."
      end
      # verify the required parameter 'variable_name' is set
      fail ArgumentError, "Missing the required parameter 'variable_name' when calling CorrelationsApi.v1_variables_variable_name_causes_get" if variable_name.nil?
      # resource path
      local_var_path = "/v1/variables/{variableName}/causes".sub('{format}','json').sub('{' + 'variableName' + '}', variable_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'quantimodo_oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Correlation>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CorrelationsApi#v1_variables_variable_name_causes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search user correlations for a given cause
    # Returns average of all correlations and votes for all user effect variables for a given cause
    # @param variable_name Cause variable name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @option opts [String] :correlation_coefficient You can use this to get effects with correlations greater than or less than 0
    # @return [Array<Correlation>]
    def v1_variables_variable_name_effects_get(variable_name, opts = {})
      data, _status_code, _headers = v1_variables_variable_name_effects_get_with_http_info(variable_name, opts)
      return data
    end

    # Search user correlations for a given cause
    # Returns average of all correlations and votes for all user effect variables for a given cause
    # @param variable_name Cause variable name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @option opts [String] :correlation_coefficient You can use this to get effects with correlations greater than or less than 0
    # @return [Array<(Array<Correlation>, Fixnum, Hash)>] Array<Correlation> data, response status code and response headers
    def v1_variables_variable_name_effects_get_with_http_info(variable_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CorrelationsApi.v1_variables_variable_name_effects_get ..."
      end
      # verify the required parameter 'variable_name' is set
      fail ArgumentError, "Missing the required parameter 'variable_name' when calling CorrelationsApi.v1_variables_variable_name_effects_get" if variable_name.nil?
      # resource path
      local_var_path = "/v1/variables/{variableName}/effects".sub('{format}','json').sub('{' + 'variableName' + '}', variable_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'access_token'] = opts[:'access_token'] if !opts[:'access_token'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'correlationCoefficient'] = opts[:'correlation_coefficient'] if !opts[:'correlation_coefficient'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'quantimodo_oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Correlation>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CorrelationsApi#v1_variables_variable_name_effects_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search public correlations for a given effect
    # Returns average of all correlations and votes for all public cause variables for a given effect
    # @param variable_name Effect variable name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @option opts [String] :correlation_coefficient You can use this to get causes with correlations greater than or less than 0
    # @return [Array<Correlation>]
    def v1_variables_variable_name_public_causes_get(variable_name, opts = {})
      data, _status_code, _headers = v1_variables_variable_name_public_causes_get_with_http_info(variable_name, opts)
      return data
    end

    # Search public correlations for a given effect
    # Returns average of all correlations and votes for all public cause variables for a given effect
    # @param variable_name Effect variable name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @option opts [String] :correlation_coefficient You can use this to get causes with correlations greater than or less than 0
    # @return [Array<(Array<Correlation>, Fixnum, Hash)>] Array<Correlation> data, response status code and response headers
    def v1_variables_variable_name_public_causes_get_with_http_info(variable_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CorrelationsApi.v1_variables_variable_name_public_causes_get ..."
      end
      # verify the required parameter 'variable_name' is set
      fail ArgumentError, "Missing the required parameter 'variable_name' when calling CorrelationsApi.v1_variables_variable_name_public_causes_get" if variable_name.nil?
      # resource path
      local_var_path = "/v1/variables/{variableName}/public/causes".sub('{format}','json').sub('{' + 'variableName' + '}', variable_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'access_token'] = opts[:'access_token'] if !opts[:'access_token'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'correlationCoefficient'] = opts[:'correlation_coefficient'] if !opts[:'correlation_coefficient'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'quantimodo_oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Correlation>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CorrelationsApi#v1_variables_variable_name_public_causes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search public correlations for a given cause
    # Returns average of all correlations and votes for all public cause variables for a given cause
    # @param variable_name Cause variable name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @return [Array<Correlation>]
    def v1_variables_variable_name_public_effects_get(variable_name, opts = {})
      data, _status_code, _headers = v1_variables_variable_name_public_effects_get_with_http_info(variable_name, opts)
      return data
    end

    # Search public correlations for a given cause
    # Returns average of all correlations and votes for all public cause variables for a given cause
    # @param variable_name Cause variable name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @return [Array<(Array<Correlation>, Fixnum, Hash)>] Array<Correlation> data, response status code and response headers
    def v1_variables_variable_name_public_effects_get_with_http_info(variable_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CorrelationsApi.v1_variables_variable_name_public_effects_get ..."
      end
      # verify the required parameter 'variable_name' is set
      fail ArgumentError, "Missing the required parameter 'variable_name' when calling CorrelationsApi.v1_variables_variable_name_public_effects_get" if variable_name.nil?
      # resource path
      local_var_path = "/v1/variables/{variableName}/public/effects".sub('{format}','json').sub('{' + 'variableName' + '}', variable_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'access_token'] = opts[:'access_token'] if !opts[:'access_token'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token', 'quantimodo_oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Correlation>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CorrelationsApi#v1_variables_variable_name_public_effects_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete vote
    # Delete previously posted vote
    # @param body The cause and effect variable names for the predictor vote to be deleted.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @return [CommonResponse]
    def v1_votes_delete_post(body, opts = {})
      data, _status_code, _headers = v1_votes_delete_post_with_http_info(body, opts)
      return data
    end

    # Delete vote
    # Delete previously posted vote
    # @param body The cause and effect variable names for the predictor vote to be deleted.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @return [Array<(CommonResponse, Fixnum, Hash)>] CommonResponse data, response status code and response headers
    def v1_votes_delete_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CorrelationsApi.v1_votes_delete_post ..."
      end
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling CorrelationsApi.v1_votes_delete_post" if body.nil?
      # resource path
      local_var_path = "/v1/votes/delete".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'access_token'] = opts[:'access_token'] if !opts[:'access_token'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['access_token', 'quantimodo_oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommonResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CorrelationsApi#v1_votes_delete_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Post or update vote
    # This is to enable users to indicate their opinion on the plausibility of a causal relationship between a treatment and outcome. QuantiModo incorporates crowd-sourced plausibility estimations into their algorithm. This is done allowing user to indicate their view of the plausibility of each relationship with thumbs up/down buttons placed next to each prediction.
    # @param body Contains the cause variable, effect variable, and vote value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @return [CommonResponse]
    def v1_votes_post(body, opts = {})
      data, _status_code, _headers = v1_votes_post_with_http_info(body, opts)
      return data
    end

    # Post or update vote
    # This is to enable users to indicate their opinion on the plausibility of a causal relationship between a treatment and outcome. QuantiModo incorporates crowd-sourced plausibility estimations into their algorithm. This is done allowing user to indicate their view of the plausibility of each relationship with thumbs up/down buttons placed next to each prediction.
    # @param body Contains the cause variable, effect variable, and vote value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :access_token User&#39;s OAuth2 access token
    # @option opts [Integer] :user_id User&#39;s id
    # @return [Array<(CommonResponse, Fixnum, Hash)>] CommonResponse data, response status code and response headers
    def v1_votes_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CorrelationsApi.v1_votes_post ..."
      end
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling CorrelationsApi.v1_votes_post" if body.nil?
      # resource path
      local_var_path = "/v1/votes".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'access_token'] = opts[:'access_token'] if !opts[:'access_token'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['access_token', 'quantimodo_oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CommonResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CorrelationsApi#v1_votes_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
