=begin
#QuantiModo

#QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'date'

module SwaggerClient

  class Variable
    # Variable ID
    attr_accessor :id

    # User-defined variable display name.
    attr_accessor :name

    # Variable category like Mood, Sleep, Physical Activity, Treatment, Symptom, etc.
    attr_accessor :category

    # Abbreviated name of the default unit for the variable
    attr_accessor :unit_abbreviated_name

    # Id of the default unit for the variable
    attr_accessor :abbreviated_unit_id

    # Comma-separated list of source names to limit variables to those sources
    attr_accessor :sources

    # The minimum allowed value for measurements. While you can record a value below this minimum, it will be excluded from the correlation analysis.
    attr_accessor :minimum_allowed_value

    # The maximum allowed value for measurements. While you can record a value above this maximum, it will be excluded from the correlation analysis.
    attr_accessor :maximum_allowed_value

    # Way to aggregate measurements over time. Options are \"MEAN\" or \"SUM\". SUM should be used for things like minutes of exercise.  If you use MEAN for exercise, then a person might exercise more minutes in one day but add separate measurements that were smaller.  So when we are doing correlational analysis, we would think that the person exercised less that day even though they exercised more.  Conversely, we must use MEAN for things such as ratings which cannot be SUMMED.
    attr_accessor :combination_operation

    # When it comes to analysis to determine the effects of this variable, knowing when it did not occur is as important as knowing when it did occur. For example, if you are tracking a medication, it is important to know when you did not take it, but you do not have to log zero values for all the days when you haven't taken it. Hence, you can specify a filling value (typically 0) to insert whenever data is missing.
    attr_accessor :filling_value

    # The Variable this Variable should be joined with. If the variable is joined with some other variable then it is not shown to user in the list of variables.
    attr_accessor :join_with

    # Array of Variables that are joined with this Variable
    attr_accessor :joined_variables

    # Id of the parent variable if this variable has any parent
    attr_accessor :parent

    # Array of Variables that are sub variables to this Variable
    attr_accessor :sub_variables

    # The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
    attr_accessor :onset_delay

    # The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.
    attr_accessor :duration_of_action

    # Earliest measurement time
    attr_accessor :earliest_measurement_time

    # Latest measurement time
    attr_accessor :latest_measurement_time

    # When this variable or its settings were last updated
    attr_accessor :updated

    # A value of 1 indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user.
    attr_accessor :cause_only

    # Number of correlations
    attr_accessor :number_of_correlations

    # Outcome variables (those with `outcome` == 1) are variables for which a human would generally want to identify the influencing factors. These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables.
    attr_accessor :outcome

    # The number of measurements that a given user had for this variable the last time a correlation calculation was performed. Generally correlation values are only updated once the current number of measurements for a variable is more than 10% greater than the rawMeasurementsAtLastAnalysis.  This avoids a computationally-demanding recalculation when there's not enough new data to make a significant difference in the correlation.
    attr_accessor :raw_measurements_at_last_analysis

    # Number of measurements
    attr_accessor :number_of_raw_measurements

    # Last unit
    attr_accessor :last_unit

    # Last value
    attr_accessor :last_value

    # Most common value
    attr_accessor :most_common_value

    # Most common unit
    attr_accessor :most_common_unit

    # Last source
    attr_accessor :last_source

    # 
    attr_accessor :image_url

    # 
    attr_accessor :ion_icon

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'category' => :'category',
        :'unit_abbreviated_name' => :'unitAbbreviatedName',
        :'abbreviated_unit_id' => :'abbreviatedUnitId',
        :'sources' => :'sources',
        :'minimum_allowed_value' => :'minimumAllowedValue',
        :'maximum_allowed_value' => :'maximumAllowedValue',
        :'combination_operation' => :'combinationOperation',
        :'filling_value' => :'fillingValue',
        :'join_with' => :'joinWith',
        :'joined_variables' => :'joinedVariables',
        :'parent' => :'parent',
        :'sub_variables' => :'subVariables',
        :'onset_delay' => :'onsetDelay',
        :'duration_of_action' => :'durationOfAction',
        :'earliest_measurement_time' => :'earliestMeasurementTime',
        :'latest_measurement_time' => :'latestMeasurementTime',
        :'updated' => :'updated',
        :'cause_only' => :'causeOnly',
        :'number_of_correlations' => :'numberOfCorrelations',
        :'outcome' => :'outcome',
        :'raw_measurements_at_last_analysis' => :'rawMeasurementsAtLastAnalysis',
        :'number_of_raw_measurements' => :'numberOfRawMeasurements',
        :'last_unit' => :'lastUnit',
        :'last_value' => :'lastValue',
        :'most_common_value' => :'mostCommonValue',
        :'most_common_unit' => :'mostCommonUnit',
        :'last_source' => :'lastSource',
        :'image_url' => :'imageUrl',
        :'ion_icon' => :'ionIcon'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'name' => :'String',
        :'category' => :'String',
        :'unit_abbreviated_name' => :'String',
        :'abbreviated_unit_id' => :'Integer',
        :'sources' => :'String',
        :'minimum_allowed_value' => :'Float',
        :'maximum_allowed_value' => :'Float',
        :'combination_operation' => :'String',
        :'filling_value' => :'Float',
        :'join_with' => :'String',
        :'joined_variables' => :'Array<Variable>',
        :'parent' => :'Integer',
        :'sub_variables' => :'Array<Variable>',
        :'onset_delay' => :'Integer',
        :'duration_of_action' => :'Integer',
        :'earliest_measurement_time' => :'Integer',
        :'latest_measurement_time' => :'Integer',
        :'updated' => :'Integer',
        :'cause_only' => :'Integer',
        :'number_of_correlations' => :'Integer',
        :'outcome' => :'Integer',
        :'raw_measurements_at_last_analysis' => :'Integer',
        :'number_of_raw_measurements' => :'Integer',
        :'last_unit' => :'String',
        :'last_value' => :'Integer',
        :'most_common_value' => :'Integer',
        :'most_common_unit' => :'String',
        :'last_source' => :'Integer',
        :'image_url' => :'String',
        :'ion_icon' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'category')
        self.category = attributes[:'category']
      end

      if attributes.has_key?(:'unitAbbreviatedName')
        self.unit_abbreviated_name = attributes[:'unitAbbreviatedName']
      end

      if attributes.has_key?(:'abbreviatedUnitId')
        self.abbreviated_unit_id = attributes[:'abbreviatedUnitId']
      end

      if attributes.has_key?(:'sources')
        self.sources = attributes[:'sources']
      end

      if attributes.has_key?(:'minimumAllowedValue')
        self.minimum_allowed_value = attributes[:'minimumAllowedValue']
      end

      if attributes.has_key?(:'maximumAllowedValue')
        self.maximum_allowed_value = attributes[:'maximumAllowedValue']
      end

      if attributes.has_key?(:'combinationOperation')
        self.combination_operation = attributes[:'combinationOperation']
      end

      if attributes.has_key?(:'fillingValue')
        self.filling_value = attributes[:'fillingValue']
      end

      if attributes.has_key?(:'joinWith')
        self.join_with = attributes[:'joinWith']
      end

      if attributes.has_key?(:'joinedVariables')
        if (value = attributes[:'joinedVariables']).is_a?(Array)
          self.joined_variables = value
        end
      end

      if attributes.has_key?(:'parent')
        self.parent = attributes[:'parent']
      end

      if attributes.has_key?(:'subVariables')
        if (value = attributes[:'subVariables']).is_a?(Array)
          self.sub_variables = value
        end
      end

      if attributes.has_key?(:'onsetDelay')
        self.onset_delay = attributes[:'onsetDelay']
      end

      if attributes.has_key?(:'durationOfAction')
        self.duration_of_action = attributes[:'durationOfAction']
      end

      if attributes.has_key?(:'earliestMeasurementTime')
        self.earliest_measurement_time = attributes[:'earliestMeasurementTime']
      end

      if attributes.has_key?(:'latestMeasurementTime')
        self.latest_measurement_time = attributes[:'latestMeasurementTime']
      end

      if attributes.has_key?(:'updated')
        self.updated = attributes[:'updated']
      end

      if attributes.has_key?(:'causeOnly')
        self.cause_only = attributes[:'causeOnly']
      end

      if attributes.has_key?(:'numberOfCorrelations')
        self.number_of_correlations = attributes[:'numberOfCorrelations']
      end

      if attributes.has_key?(:'outcome')
        self.outcome = attributes[:'outcome']
      end

      if attributes.has_key?(:'rawMeasurementsAtLastAnalysis')
        self.raw_measurements_at_last_analysis = attributes[:'rawMeasurementsAtLastAnalysis']
      end

      if attributes.has_key?(:'numberOfRawMeasurements')
        self.number_of_raw_measurements = attributes[:'numberOfRawMeasurements']
      end

      if attributes.has_key?(:'lastUnit')
        self.last_unit = attributes[:'lastUnit']
      end

      if attributes.has_key?(:'lastValue')
        self.last_value = attributes[:'lastValue']
      end

      if attributes.has_key?(:'mostCommonValue')
        self.most_common_value = attributes[:'mostCommonValue']
      end

      if attributes.has_key?(:'mostCommonUnit')
        self.most_common_unit = attributes[:'mostCommonUnit']
      end

      if attributes.has_key?(:'lastSource')
        self.last_source = attributes[:'lastSource']
      end

      if attributes.has_key?(:'imageUrl')
        self.image_url = attributes[:'imageUrl']
      end

      if attributes.has_key?(:'ionIcon')
        self.ion_icon = attributes[:'ionIcon']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push("invalid value for 'name', name cannot be nil.")
      end

      if @category.nil?
        invalid_properties.push("invalid value for 'category', category cannot be nil.")
      end

      if @unit_abbreviated_name.nil?
        invalid_properties.push("invalid value for 'unit_abbreviated_name', unit_abbreviated_name cannot be nil.")
      end

      if @abbreviated_unit_id.nil?
        invalid_properties.push("invalid value for 'abbreviated_unit_id', abbreviated_unit_id cannot be nil.")
      end

      if @sources.nil?
        invalid_properties.push("invalid value for 'sources', sources cannot be nil.")
      end

      if @minimum_allowed_value.nil?
        invalid_properties.push("invalid value for 'minimum_allowed_value', minimum_allowed_value cannot be nil.")
      end

      if @maximum_allowed_value.nil?
        invalid_properties.push("invalid value for 'maximum_allowed_value', maximum_allowed_value cannot be nil.")
      end

      if @combination_operation.nil?
        invalid_properties.push("invalid value for 'combination_operation', combination_operation cannot be nil.")
      end

      if @filling_value.nil?
        invalid_properties.push("invalid value for 'filling_value', filling_value cannot be nil.")
      end

      if @join_with.nil?
        invalid_properties.push("invalid value for 'join_with', join_with cannot be nil.")
      end

      if @joined_variables.nil?
        invalid_properties.push("invalid value for 'joined_variables', joined_variables cannot be nil.")
      end

      if @parent.nil?
        invalid_properties.push("invalid value for 'parent', parent cannot be nil.")
      end

      if @sub_variables.nil?
        invalid_properties.push("invalid value for 'sub_variables', sub_variables cannot be nil.")
      end

      if @onset_delay.nil?
        invalid_properties.push("invalid value for 'onset_delay', onset_delay cannot be nil.")
      end

      if @duration_of_action.nil?
        invalid_properties.push("invalid value for 'duration_of_action', duration_of_action cannot be nil.")
      end

      if @earliest_measurement_time.nil?
        invalid_properties.push("invalid value for 'earliest_measurement_time', earliest_measurement_time cannot be nil.")
      end

      if @latest_measurement_time.nil?
        invalid_properties.push("invalid value for 'latest_measurement_time', latest_measurement_time cannot be nil.")
      end

      if @updated.nil?
        invalid_properties.push("invalid value for 'updated', updated cannot be nil.")
      end

      if @cause_only.nil?
        invalid_properties.push("invalid value for 'cause_only', cause_only cannot be nil.")
      end

      if @number_of_correlations.nil?
        invalid_properties.push("invalid value for 'number_of_correlations', number_of_correlations cannot be nil.")
      end

      if @outcome.nil?
        invalid_properties.push("invalid value for 'outcome', outcome cannot be nil.")
      end

      if @raw_measurements_at_last_analysis.nil?
        invalid_properties.push("invalid value for 'raw_measurements_at_last_analysis', raw_measurements_at_last_analysis cannot be nil.")
      end

      if @number_of_raw_measurements.nil?
        invalid_properties.push("invalid value for 'number_of_raw_measurements', number_of_raw_measurements cannot be nil.")
      end

      if @last_unit.nil?
        invalid_properties.push("invalid value for 'last_unit', last_unit cannot be nil.")
      end

      if @last_value.nil?
        invalid_properties.push("invalid value for 'last_value', last_value cannot be nil.")
      end

      if @most_common_value.nil?
        invalid_properties.push("invalid value for 'most_common_value', most_common_value cannot be nil.")
      end

      if @most_common_unit.nil?
        invalid_properties.push("invalid value for 'most_common_unit', most_common_unit cannot be nil.")
      end

      if @last_source.nil?
        invalid_properties.push("invalid value for 'last_source', last_source cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      return false if @category.nil?
      return false if @unit_abbreviated_name.nil?
      return false if @abbreviated_unit_id.nil?
      return false if @sources.nil?
      return false if @minimum_allowed_value.nil?
      return false if @maximum_allowed_value.nil?
      return false if @combination_operation.nil?
      combination_operation_validator = EnumAttributeValidator.new('String', ["MEAN", "SUM"])
      return false unless combination_operation_validator.valid?(@combination_operation)
      return false if @filling_value.nil?
      return false if @join_with.nil?
      return false if @joined_variables.nil?
      return false if @parent.nil?
      return false if @sub_variables.nil?
      return false if @onset_delay.nil?
      return false if @duration_of_action.nil?
      return false if @earliest_measurement_time.nil?
      return false if @latest_measurement_time.nil?
      return false if @updated.nil?
      return false if @cause_only.nil?
      return false if @number_of_correlations.nil?
      return false if @outcome.nil?
      return false if @raw_measurements_at_last_analysis.nil?
      return false if @number_of_raw_measurements.nil?
      return false if @last_unit.nil?
      return false if @last_value.nil?
      return false if @most_common_value.nil?
      return false if @most_common_unit.nil?
      return false if @last_source.nil?
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] combination_operation Object to be assigned
    def combination_operation=(combination_operation)
      validator = EnumAttributeValidator.new('String', ["MEAN", "SUM"])
      unless validator.valid?(combination_operation)
        fail ArgumentError, "invalid value for 'combination_operation', must be one of #{validator.allowable_values}."
      end
      @combination_operation = combination_operation
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          category == o.category &&
          unit_abbreviated_name == o.unit_abbreviated_name &&
          abbreviated_unit_id == o.abbreviated_unit_id &&
          sources == o.sources &&
          minimum_allowed_value == o.minimum_allowed_value &&
          maximum_allowed_value == o.maximum_allowed_value &&
          combination_operation == o.combination_operation &&
          filling_value == o.filling_value &&
          join_with == o.join_with &&
          joined_variables == o.joined_variables &&
          parent == o.parent &&
          sub_variables == o.sub_variables &&
          onset_delay == o.onset_delay &&
          duration_of_action == o.duration_of_action &&
          earliest_measurement_time == o.earliest_measurement_time &&
          latest_measurement_time == o.latest_measurement_time &&
          updated == o.updated &&
          cause_only == o.cause_only &&
          number_of_correlations == o.number_of_correlations &&
          outcome == o.outcome &&
          raw_measurements_at_last_analysis == o.raw_measurements_at_last_analysis &&
          number_of_raw_measurements == o.number_of_raw_measurements &&
          last_unit == o.last_unit &&
          last_value == o.last_value &&
          most_common_value == o.most_common_value &&
          most_common_unit == o.most_common_unit &&
          last_source == o.last_source &&
          image_url == o.image_url &&
          ion_icon == o.ion_icon
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, name, category, unit_abbreviated_name, abbreviated_unit_id, sources, minimum_allowed_value, maximum_allowed_value, combination_operation, filling_value, join_with, joined_variables, parent, sub_variables, onset_delay, duration_of_action, earliest_measurement_time, latest_measurement_time, updated, cause_only, number_of_correlations, outcome, raw_measurements_at_last_analysis, number_of_raw_measurements, last_unit, last_value, most_common_value, most_common_unit, last_source, image_url, ion_icon].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
