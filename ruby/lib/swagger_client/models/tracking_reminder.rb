=begin
#QuantiModo

#QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'date'

module SwaggerClient

  class TrackingReminder
    # id
    attr_accessor :id

    # clientId
    attr_accessor :client_id

    # ID of User
    attr_accessor :user_id

    # Id for the variable to be tracked
    attr_accessor :variable_id

    # Default value to use for the measurement when tracking
    attr_accessor :default_value

    # Earliest time of day at which reminders should appear in UTC HH:MM:SS format
    attr_accessor :reminder_start_time

    # Latest time of day at which reminders should appear in UTC HH:MM:SS format
    attr_accessor :reminder_end_time

    # String identifier for the sound to accompany the reminder
    attr_accessor :reminder_sound

    # Number of seconds between one reminder and the next
    attr_accessor :reminder_frequency

    # True if the reminders should appear as a popup notification
    attr_accessor :pop_up

    # True if the reminders should be delivered via SMS
    attr_accessor :sms

    # True if the reminders should be delivered via email
    attr_accessor :email

    # True if the reminders should appear in the notification bar
    attr_accessor :notification_bar

    # UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"  timestamp for the reminder time of the latest tracking reminder notification that has been pre-emptively generated in the database
    attr_accessor :latest_tracking_reminder_notification_reminder_time

    # UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"  timestamp for the last time a measurement was received for this user and variable
    attr_accessor :last_tracked

    # Earliest date on which the user should be reminded to track in YYYY-MM-DD format
    attr_accessor :start_tracking_date

    # Latest date on which the user should be reminded to track in YYYY-MM-DD format
    attr_accessor :stop_tracking_date

    # When the record in the database was last updated. Use UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"  datetime format. Time zone should be UTC and not local.
    attr_accessor :updated_at

    # Name of the variable to be used when sending measurements
    attr_accessor :variable_name

    # Name of the variable category to be used when sending measurements
    attr_accessor :variable_category_name

    # Abbreviated name of the unit to be used when sending measurements
    attr_accessor :unit_abbreviated_name

    # The way multiple measurements are aggregated over time
    attr_accessor :combination_operation

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'client_id' => :'clientId',
        :'user_id' => :'userId',
        :'variable_id' => :'variableId',
        :'default_value' => :'defaultValue',
        :'reminder_start_time' => :'reminderStartTime',
        :'reminder_end_time' => :'reminderEndTime',
        :'reminder_sound' => :'reminderSound',
        :'reminder_frequency' => :'reminderFrequency',
        :'pop_up' => :'popUp',
        :'sms' => :'sms',
        :'email' => :'email',
        :'notification_bar' => :'notificationBar',
        :'latest_tracking_reminder_notification_reminder_time' => :'latestTrackingReminderNotificationReminderTime',
        :'last_tracked' => :'lastTracked',
        :'start_tracking_date' => :'startTrackingDate',
        :'stop_tracking_date' => :'stopTrackingDate',
        :'updated_at' => :'updatedAt',
        :'variable_name' => :'variableName',
        :'variable_category_name' => :'variableCategoryName',
        :'unit_abbreviated_name' => :'unitAbbreviatedName',
        :'combination_operation' => :'combinationOperation'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'client_id' => :'String',
        :'user_id' => :'Integer',
        :'variable_id' => :'Integer',
        :'default_value' => :'Float',
        :'reminder_start_time' => :'String',
        :'reminder_end_time' => :'String',
        :'reminder_sound' => :'String',
        :'reminder_frequency' => :'Integer',
        :'pop_up' => :'BOOLEAN',
        :'sms' => :'BOOLEAN',
        :'email' => :'BOOLEAN',
        :'notification_bar' => :'BOOLEAN',
        :'latest_tracking_reminder_notification_reminder_time' => :'DateTime',
        :'last_tracked' => :'DateTime',
        :'start_tracking_date' => :'String',
        :'stop_tracking_date' => :'String',
        :'updated_at' => :'DateTime',
        :'variable_name' => :'String',
        :'variable_category_name' => :'String',
        :'unit_abbreviated_name' => :'String',
        :'combination_operation' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'clientId')
        self.client_id = attributes[:'clientId']
      end

      if attributes.has_key?(:'userId')
        self.user_id = attributes[:'userId']
      end

      if attributes.has_key?(:'variableId')
        self.variable_id = attributes[:'variableId']
      end

      if attributes.has_key?(:'defaultValue')
        self.default_value = attributes[:'defaultValue']
      end

      if attributes.has_key?(:'reminderStartTime')
        self.reminder_start_time = attributes[:'reminderStartTime']
      end

      if attributes.has_key?(:'reminderEndTime')
        self.reminder_end_time = attributes[:'reminderEndTime']
      end

      if attributes.has_key?(:'reminderSound')
        self.reminder_sound = attributes[:'reminderSound']
      end

      if attributes.has_key?(:'reminderFrequency')
        self.reminder_frequency = attributes[:'reminderFrequency']
      end

      if attributes.has_key?(:'popUp')
        self.pop_up = attributes[:'popUp']
      end

      if attributes.has_key?(:'sms')
        self.sms = attributes[:'sms']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'notificationBar')
        self.notification_bar = attributes[:'notificationBar']
      end

      if attributes.has_key?(:'latestTrackingReminderNotificationReminderTime')
        self.latest_tracking_reminder_notification_reminder_time = attributes[:'latestTrackingReminderNotificationReminderTime']
      end

      if attributes.has_key?(:'lastTracked')
        self.last_tracked = attributes[:'lastTracked']
      end

      if attributes.has_key?(:'startTrackingDate')
        self.start_tracking_date = attributes[:'startTrackingDate']
      end

      if attributes.has_key?(:'stopTrackingDate')
        self.stop_tracking_date = attributes[:'stopTrackingDate']
      end

      if attributes.has_key?(:'updatedAt')
        self.updated_at = attributes[:'updatedAt']
      end

      if attributes.has_key?(:'variableName')
        self.variable_name = attributes[:'variableName']
      end

      if attributes.has_key?(:'variableCategoryName')
        self.variable_category_name = attributes[:'variableCategoryName']
      end

      if attributes.has_key?(:'unitAbbreviatedName')
        self.unit_abbreviated_name = attributes[:'unitAbbreviatedName']
      end

      if attributes.has_key?(:'combinationOperation')
        self.combination_operation = attributes[:'combinationOperation']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @variable_id.nil?
        invalid_properties.push("invalid value for 'variable_id', variable_id cannot be nil.")
      end

      if @default_value.nil?
        invalid_properties.push("invalid value for 'default_value', default_value cannot be nil.")
      end

      if @reminder_frequency.nil?
        invalid_properties.push("invalid value for 'reminder_frequency', reminder_frequency cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @variable_id.nil?
      return false if @default_value.nil?
      return false if @reminder_frequency.nil?
      combination_operation_validator = EnumAttributeValidator.new('String', ["MEAN", "SUM"])
      return false unless combination_operation_validator.valid?(@combination_operation)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] combination_operation Object to be assigned
    def combination_operation=(combination_operation)
      validator = EnumAttributeValidator.new('String', ["MEAN", "SUM"])
      unless validator.valid?(combination_operation)
        fail ArgumentError, "invalid value for 'combination_operation', must be one of #{validator.allowable_values}."
      end
      @combination_operation = combination_operation
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          client_id == o.client_id &&
          user_id == o.user_id &&
          variable_id == o.variable_id &&
          default_value == o.default_value &&
          reminder_start_time == o.reminder_start_time &&
          reminder_end_time == o.reminder_end_time &&
          reminder_sound == o.reminder_sound &&
          reminder_frequency == o.reminder_frequency &&
          pop_up == o.pop_up &&
          sms == o.sms &&
          email == o.email &&
          notification_bar == o.notification_bar &&
          latest_tracking_reminder_notification_reminder_time == o.latest_tracking_reminder_notification_reminder_time &&
          last_tracked == o.last_tracked &&
          start_tracking_date == o.start_tracking_date &&
          stop_tracking_date == o.stop_tracking_date &&
          updated_at == o.updated_at &&
          variable_name == o.variable_name &&
          variable_category_name == o.variable_category_name &&
          unit_abbreviated_name == o.unit_abbreviated_name &&
          combination_operation == o.combination_operation
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, client_id, user_id, variable_id, default_value, reminder_start_time, reminder_end_time, reminder_sound, reminder_frequency, pop_up, sms, email, notification_bar, latest_tracking_reminder_notification_reminder_time, last_tracked, start_tracking_date, stop_tracking_date, updated_at, variable_name, variable_category_name, unit_abbreviated_name, combination_operation].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
