=begin
#QuantiModo

#QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'date'

module SwaggerClient

  class UserVariable
    # ID of the parent variable if this variable has any parent
    attr_accessor :parent_id

    # User ID
    attr_accessor :user_id

    # clientId
    attr_accessor :client_id

    # ID of variable
    attr_accessor :variable_id

    # ID of unit to use for this variable
    attr_accessor :default_unit_id

    # The minimum allowed value for measurements. While you can record a value below this minimum, it will be excluded from the correlation analysis.
    attr_accessor :minimum_allowed_value

    # The maximum allowed value for measurements. While you can record a value above this maximum, it will be excluded from the correlation analysis.
    attr_accessor :maximum_allowed_value

    # When it comes to analysis to determine the effects of this variable, knowing when it did not occur is as important as knowing when it did occur. For example, if you are tracking a medication, it is important to know when you did not take it, but you do not have to log zero values for all the days when you haven't taken it. Hence, you can specify a filling value (typically 0) to insert whenever data is missing.
    attr_accessor :filling_value

    # The Variable this Variable should be joined with. If the variable is joined with some other variable then it is not shown to user in the list of variables
    attr_accessor :join_with

    # The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
    attr_accessor :onset_delay

    # The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.
    attr_accessor :duration_of_action

    # ID of variable category
    attr_accessor :variable_category_id

    # updated
    attr_accessor :updated

    # Is variable public
    attr_accessor :public

    # A value of 1 indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user
    attr_accessor :cause_only

    # 0 -> No filling, 1 -> Use filling-value
    attr_accessor :filling_type

    # Number of measurements
    attr_accessor :number_of_measurements

    # Number of processed measurements
    attr_accessor :number_of_processed_daily_measurements

    # Number of measurements at last analysis
    attr_accessor :measurements_at_last_analysis

    # ID of last Unit
    attr_accessor :last_unit_id

    # ID of last original Unit
    attr_accessor :last_original_unit_id

    # Last Value
    attr_accessor :last_value

    # Last original value which is stored
    attr_accessor :last_original_value

    # Number of correlations for this variable
    attr_accessor :number_of_correlations

    # status
    attr_accessor :status

    # error_message
    attr_accessor :error_message

    # When this variable or its settings were last updated
    attr_accessor :last_successful_update_time

    # Standard deviation
    attr_accessor :standard_deviation

    # Variance
    attr_accessor :variance

    # Minimum recorded value of this variable
    attr_accessor :minimum_recorded_value

    # Maximum recorded daily value of this variable
    attr_accessor :maximum_recorded_daily_value

    # Mean
    attr_accessor :mean

    # Median
    attr_accessor :median

    # Most common Unit ID
    attr_accessor :most_common_unit_id

    # Most common value
    attr_accessor :most_common_value

    # Number of unique daily values
    attr_accessor :number_of_unique_daily_values

    # Number of changes
    attr_accessor :number_of_changes

    # Skewness
    attr_accessor :skewness

    # Kurtosis
    attr_accessor :kurtosis

    # Latitude
    attr_accessor :latitude

    # Longitude
    attr_accessor :longitude

    # Location
    attr_accessor :location

    # Earliest measurement start_time to be used in analysis. Use UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"  datetime format
    attr_accessor :experiment_start_time

    # Latest measurement start_time to be used in analysis. Use UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"  datetime format
    attr_accessor :experiment_end_time

    # When the record was first created. Use UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"  datetime format
    attr_accessor :created_at

    # When the record in the database was last updated. Use UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"  datetime format
    attr_accessor :updated_at

    # Outcome variables (those with `outcome` == 1) are variables for which a human would generally want to identify the influencing factors. These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables
    attr_accessor :outcome

    # Comma-separated list of source names to limit variables to those sources
    attr_accessor :sources

    # Earliest source time
    attr_accessor :earliest_source_time

    # Latest source time
    attr_accessor :latest_source_time

    # Earliest measurement time
    attr_accessor :earliest_measurement_time

    # Latest measurement time
    attr_accessor :latest_measurement_time

    # Earliest filling time
    attr_accessor :earliest_filling_time

    # Latest filling time
    attr_accessor :latest_filling_time

    # 
    attr_accessor :image_url

    # 
    attr_accessor :ion_icon


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'parent_id' => :'parentId',
        :'user_id' => :'userId',
        :'client_id' => :'clientId',
        :'variable_id' => :'variableId',
        :'default_unit_id' => :'defaultUnitId',
        :'minimum_allowed_value' => :'minimumAllowedValue',
        :'maximum_allowed_value' => :'maximumAllowedValue',
        :'filling_value' => :'fillingValue',
        :'join_with' => :'joinWith',
        :'onset_delay' => :'onsetDelay',
        :'duration_of_action' => :'durationOfAction',
        :'variable_category_id' => :'variableCategoryId',
        :'updated' => :'updated',
        :'public' => :'public',
        :'cause_only' => :'causeOnly',
        :'filling_type' => :'fillingType',
        :'number_of_measurements' => :'numberOfMeasurements',
        :'number_of_processed_daily_measurements' => :'numberOfProcessedDailyMeasurements',
        :'measurements_at_last_analysis' => :'measurementsAtLastAnalysis',
        :'last_unit_id' => :'lastUnitId',
        :'last_original_unit_id' => :'lastOriginalUnitId',
        :'last_value' => :'lastValue',
        :'last_original_value' => :'lastOriginalValue',
        :'number_of_correlations' => :'numberOfCorrelations',
        :'status' => :'status',
        :'error_message' => :'errorMessage',
        :'last_successful_update_time' => :'lastSuccessfulUpdateTime',
        :'standard_deviation' => :'standard_deviation',
        :'variance' => :'variance',
        :'minimum_recorded_value' => :'minimumRecordedValue',
        :'maximum_recorded_daily_value' => :'maximumRecordedDailyValue',
        :'mean' => :'mean',
        :'median' => :'median',
        :'most_common_unit_id' => :'mostCommonUnitId',
        :'most_common_value' => :'mostCommonValue',
        :'number_of_unique_daily_values' => :'numberOfUniqueDailyValues',
        :'number_of_changes' => :'numberOfChanges',
        :'skewness' => :'skewness',
        :'kurtosis' => :'kurtosis',
        :'latitude' => :'latitude',
        :'longitude' => :'longitude',
        :'location' => :'location',
        :'experiment_start_time' => :'experimentStartTime',
        :'experiment_end_time' => :'experimentEndTime',
        :'created_at' => :'createdAt',
        :'updated_at' => :'updatedAt',
        :'outcome' => :'outcome',
        :'sources' => :'sources',
        :'earliest_source_time' => :'earliestSourceTime',
        :'latest_source_time' => :'latestSourceTime',
        :'earliest_measurement_time' => :'earliestMeasurementTime',
        :'latest_measurement_time' => :'latestMeasurementTime',
        :'earliest_filling_time' => :'earliestFillingTime',
        :'latest_filling_time' => :'latestFillingTime',
        :'image_url' => :'imageUrl',
        :'ion_icon' => :'ionIcon'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'parent_id' => :'Integer',
        :'user_id' => :'Integer',
        :'client_id' => :'String',
        :'variable_id' => :'Integer',
        :'default_unit_id' => :'Integer',
        :'minimum_allowed_value' => :'Float',
        :'maximum_allowed_value' => :'Float',
        :'filling_value' => :'Float',
        :'join_with' => :'Integer',
        :'onset_delay' => :'Integer',
        :'duration_of_action' => :'Integer',
        :'variable_category_id' => :'Integer',
        :'updated' => :'Integer',
        :'public' => :'Integer',
        :'cause_only' => :'BOOLEAN',
        :'filling_type' => :'String',
        :'number_of_measurements' => :'Integer',
        :'number_of_processed_daily_measurements' => :'Integer',
        :'measurements_at_last_analysis' => :'Integer',
        :'last_unit_id' => :'Integer',
        :'last_original_unit_id' => :'Integer',
        :'last_value' => :'Float',
        :'last_original_value' => :'Integer',
        :'number_of_correlations' => :'Integer',
        :'status' => :'String',
        :'error_message' => :'String',
        :'last_successful_update_time' => :'DateTime',
        :'standard_deviation' => :'Float',
        :'variance' => :'Float',
        :'minimum_recorded_value' => :'Float',
        :'maximum_recorded_daily_value' => :'Float',
        :'mean' => :'Float',
        :'median' => :'Float',
        :'most_common_unit_id' => :'Integer',
        :'most_common_value' => :'Float',
        :'number_of_unique_daily_values' => :'Float',
        :'number_of_changes' => :'Integer',
        :'skewness' => :'Float',
        :'kurtosis' => :'Float',
        :'latitude' => :'Float',
        :'longitude' => :'Float',
        :'location' => :'String',
        :'experiment_start_time' => :'DateTime',
        :'experiment_end_time' => :'DateTime',
        :'created_at' => :'DateTime',
        :'updated_at' => :'DateTime',
        :'outcome' => :'BOOLEAN',
        :'sources' => :'String',
        :'earliest_source_time' => :'Integer',
        :'latest_source_time' => :'Integer',
        :'earliest_measurement_time' => :'Integer',
        :'latest_measurement_time' => :'Integer',
        :'earliest_filling_time' => :'Integer',
        :'latest_filling_time' => :'Integer',
        :'image_url' => :'String',
        :'ion_icon' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'parentId')
        self.parent_id = attributes[:'parentId']
      end

      if attributes.has_key?(:'userId')
        self.user_id = attributes[:'userId']
      end

      if attributes.has_key?(:'clientId')
        self.client_id = attributes[:'clientId']
      end

      if attributes.has_key?(:'variableId')
        self.variable_id = attributes[:'variableId']
      end

      if attributes.has_key?(:'defaultUnitId')
        self.default_unit_id = attributes[:'defaultUnitId']
      end

      if attributes.has_key?(:'minimumAllowedValue')
        self.minimum_allowed_value = attributes[:'minimumAllowedValue']
      end

      if attributes.has_key?(:'maximumAllowedValue')
        self.maximum_allowed_value = attributes[:'maximumAllowedValue']
      end

      if attributes.has_key?(:'fillingValue')
        self.filling_value = attributes[:'fillingValue']
      end

      if attributes.has_key?(:'joinWith')
        self.join_with = attributes[:'joinWith']
      end

      if attributes.has_key?(:'onsetDelay')
        self.onset_delay = attributes[:'onsetDelay']
      end

      if attributes.has_key?(:'durationOfAction')
        self.duration_of_action = attributes[:'durationOfAction']
      end

      if attributes.has_key?(:'variableCategoryId')
        self.variable_category_id = attributes[:'variableCategoryId']
      end

      if attributes.has_key?(:'updated')
        self.updated = attributes[:'updated']
      end

      if attributes.has_key?(:'public')
        self.public = attributes[:'public']
      end

      if attributes.has_key?(:'causeOnly')
        self.cause_only = attributes[:'causeOnly']
      end

      if attributes.has_key?(:'fillingType')
        self.filling_type = attributes[:'fillingType']
      end

      if attributes.has_key?(:'numberOfMeasurements')
        self.number_of_measurements = attributes[:'numberOfMeasurements']
      end

      if attributes.has_key?(:'numberOfProcessedDailyMeasurements')
        self.number_of_processed_daily_measurements = attributes[:'numberOfProcessedDailyMeasurements']
      end

      if attributes.has_key?(:'measurementsAtLastAnalysis')
        self.measurements_at_last_analysis = attributes[:'measurementsAtLastAnalysis']
      end

      if attributes.has_key?(:'lastUnitId')
        self.last_unit_id = attributes[:'lastUnitId']
      end

      if attributes.has_key?(:'lastOriginalUnitId')
        self.last_original_unit_id = attributes[:'lastOriginalUnitId']
      end

      if attributes.has_key?(:'lastValue')
        self.last_value = attributes[:'lastValue']
      end

      if attributes.has_key?(:'lastOriginalValue')
        self.last_original_value = attributes[:'lastOriginalValue']
      end

      if attributes.has_key?(:'numberOfCorrelations')
        self.number_of_correlations = attributes[:'numberOfCorrelations']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'errorMessage')
        self.error_message = attributes[:'errorMessage']
      end

      if attributes.has_key?(:'lastSuccessfulUpdateTime')
        self.last_successful_update_time = attributes[:'lastSuccessfulUpdateTime']
      end

      if attributes.has_key?(:'standard_deviation')
        self.standard_deviation = attributes[:'standard_deviation']
      end

      if attributes.has_key?(:'variance')
        self.variance = attributes[:'variance']
      end

      if attributes.has_key?(:'minimumRecordedValue')
        self.minimum_recorded_value = attributes[:'minimumRecordedValue']
      end

      if attributes.has_key?(:'maximumRecordedDailyValue')
        self.maximum_recorded_daily_value = attributes[:'maximumRecordedDailyValue']
      end

      if attributes.has_key?(:'mean')
        self.mean = attributes[:'mean']
      end

      if attributes.has_key?(:'median')
        self.median = attributes[:'median']
      end

      if attributes.has_key?(:'mostCommonUnitId')
        self.most_common_unit_id = attributes[:'mostCommonUnitId']
      end

      if attributes.has_key?(:'mostCommonValue')
        self.most_common_value = attributes[:'mostCommonValue']
      end

      if attributes.has_key?(:'numberOfUniqueDailyValues')
        self.number_of_unique_daily_values = attributes[:'numberOfUniqueDailyValues']
      end

      if attributes.has_key?(:'numberOfChanges')
        self.number_of_changes = attributes[:'numberOfChanges']
      end

      if attributes.has_key?(:'skewness')
        self.skewness = attributes[:'skewness']
      end

      if attributes.has_key?(:'kurtosis')
        self.kurtosis = attributes[:'kurtosis']
      end

      if attributes.has_key?(:'latitude')
        self.latitude = attributes[:'latitude']
      end

      if attributes.has_key?(:'longitude')
        self.longitude = attributes[:'longitude']
      end

      if attributes.has_key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.has_key?(:'experimentStartTime')
        self.experiment_start_time = attributes[:'experimentStartTime']
      end

      if attributes.has_key?(:'experimentEndTime')
        self.experiment_end_time = attributes[:'experimentEndTime']
      end

      if attributes.has_key?(:'createdAt')
        self.created_at = attributes[:'createdAt']
      end

      if attributes.has_key?(:'updatedAt')
        self.updated_at = attributes[:'updatedAt']
      end

      if attributes.has_key?(:'outcome')
        self.outcome = attributes[:'outcome']
      end

      if attributes.has_key?(:'sources')
        self.sources = attributes[:'sources']
      end

      if attributes.has_key?(:'earliestSourceTime')
        self.earliest_source_time = attributes[:'earliestSourceTime']
      end

      if attributes.has_key?(:'latestSourceTime')
        self.latest_source_time = attributes[:'latestSourceTime']
      end

      if attributes.has_key?(:'earliestMeasurementTime')
        self.earliest_measurement_time = attributes[:'earliestMeasurementTime']
      end

      if attributes.has_key?(:'latestMeasurementTime')
        self.latest_measurement_time = attributes[:'latestMeasurementTime']
      end

      if attributes.has_key?(:'earliestFillingTime')
        self.earliest_filling_time = attributes[:'earliestFillingTime']
      end

      if attributes.has_key?(:'latestFillingTime')
        self.latest_filling_time = attributes[:'latestFillingTime']
      end

      if attributes.has_key?(:'imageUrl')
        self.image_url = attributes[:'imageUrl']
      end

      if attributes.has_key?(:'ionIcon')
        self.ion_icon = attributes[:'ionIcon']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @variable_id.nil?
        invalid_properties.push("invalid value for 'variable_id', variable_id cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @variable_id.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          parent_id == o.parent_id &&
          user_id == o.user_id &&
          client_id == o.client_id &&
          variable_id == o.variable_id &&
          default_unit_id == o.default_unit_id &&
          minimum_allowed_value == o.minimum_allowed_value &&
          maximum_allowed_value == o.maximum_allowed_value &&
          filling_value == o.filling_value &&
          join_with == o.join_with &&
          onset_delay == o.onset_delay &&
          duration_of_action == o.duration_of_action &&
          variable_category_id == o.variable_category_id &&
          updated == o.updated &&
          public == o.public &&
          cause_only == o.cause_only &&
          filling_type == o.filling_type &&
          number_of_measurements == o.number_of_measurements &&
          number_of_processed_daily_measurements == o.number_of_processed_daily_measurements &&
          measurements_at_last_analysis == o.measurements_at_last_analysis &&
          last_unit_id == o.last_unit_id &&
          last_original_unit_id == o.last_original_unit_id &&
          last_value == o.last_value &&
          last_original_value == o.last_original_value &&
          number_of_correlations == o.number_of_correlations &&
          status == o.status &&
          error_message == o.error_message &&
          last_successful_update_time == o.last_successful_update_time &&
          standard_deviation == o.standard_deviation &&
          variance == o.variance &&
          minimum_recorded_value == o.minimum_recorded_value &&
          maximum_recorded_daily_value == o.maximum_recorded_daily_value &&
          mean == o.mean &&
          median == o.median &&
          most_common_unit_id == o.most_common_unit_id &&
          most_common_value == o.most_common_value &&
          number_of_unique_daily_values == o.number_of_unique_daily_values &&
          number_of_changes == o.number_of_changes &&
          skewness == o.skewness &&
          kurtosis == o.kurtosis &&
          latitude == o.latitude &&
          longitude == o.longitude &&
          location == o.location &&
          experiment_start_time == o.experiment_start_time &&
          experiment_end_time == o.experiment_end_time &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          outcome == o.outcome &&
          sources == o.sources &&
          earliest_source_time == o.earliest_source_time &&
          latest_source_time == o.latest_source_time &&
          earliest_measurement_time == o.earliest_measurement_time &&
          latest_measurement_time == o.latest_measurement_time &&
          earliest_filling_time == o.earliest_filling_time &&
          latest_filling_time == o.latest_filling_time &&
          image_url == o.image_url &&
          ion_icon == o.ion_icon
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [parent_id, user_id, client_id, variable_id, default_unit_id, minimum_allowed_value, maximum_allowed_value, filling_value, join_with, onset_delay, duration_of_action, variable_category_id, updated, public, cause_only, filling_type, number_of_measurements, number_of_processed_daily_measurements, measurements_at_last_analysis, last_unit_id, last_original_unit_id, last_value, last_original_value, number_of_correlations, status, error_message, last_successful_update_time, standard_deviation, variance, minimum_recorded_value, maximum_recorded_daily_value, mean, median, most_common_unit_id, most_common_value, number_of_unique_daily_values, number_of_changes, skewness, kurtosis, latitude, longitude, location, experiment_start_time, experiment_end_time, created_at, updated_at, outcome, sources, earliest_source_time, latest_source_time, earliest_measurement_time, latest_measurement_time, earliest_filling_time, latest_filling_time, image_url, ion_icon].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
