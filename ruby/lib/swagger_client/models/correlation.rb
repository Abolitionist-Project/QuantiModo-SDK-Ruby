=begin
#QuantiModo

#QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'date'

module SwaggerClient

  class Correlation
    # 
    attr_accessor :average_daily_low_cause

    # 
    attr_accessor :average_daily_high_cause

    # 
    attr_accessor :average_effect

    # 
    attr_accessor :average_effect_following_high_cause

    # 
    attr_accessor :average_effect_following_low_cause

    # 
    attr_accessor :average_effect_following_high_cause_explanation

    # 
    attr_accessor :average_effect_following_low_cause_explanation

    # Average Vote
    attr_accessor :average_vote

    # 
    attr_accessor :causality_factor

    # Variable name of the cause variable for which the user desires correlations.
    attr_accessor :cause

    # Variable category of the cause variable.
    attr_accessor :cause_variable_category_name

    # Number of changes in the predictor variable (a.k.a the number of experiments)
    attr_accessor :cause_changes

    # The way cause measurements are aggregated
    attr_accessor :cause_variable_combination_operation

    # 
    attr_accessor :cause_variable_image_url

    # For use in Ionic apps
    attr_accessor :cause_variable_ion_icon

    # Unit of the predictor variable
    attr_accessor :cause_unit

    # Unit Id of the predictor variable
    attr_accessor :cause_variable_default_unit_id

    # 
    attr_accessor :cause_variable_id

    # Variable name of the cause variable for which the user desires correlations.
    attr_accessor :cause_variable_name

    # Pearson correlation coefficient between cause and effect measurements
    attr_accessor :correlation_coefficient

    # When the record was first created. Use UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"  datetime format
    attr_accessor :created_at

    # How the data was analyzed
    attr_accessor :data_analysis

    # How the data was obtained
    attr_accessor :data_sources

    # The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.
    attr_accessor :duration_of_action

    # Variable name of the effect variable for which the user desires correlations.
    attr_accessor :effect

    # Variable category of the effect variable.
    attr_accessor :effect_variable_category_name

    # 
    attr_accessor :effect_variable_image_url

    # For use in Ionic apps
    attr_accessor :effect_variable_ion_icon

    # Magnitude of the effects of a cause indicating whether it's practically meaningful.
    attr_accessor :effect_size

    # Magnitude of the effects of a cause indicating whether it's practically meaningful.
    attr_accessor :effect_variable_id

    # Variable name of the effect variable for which the user desires correlations.
    attr_accessor :effect_variable_name

    # Illustrates the strength of the relationship
    attr_accessor :gauge_image

    # Large image for Facebook
    attr_accessor :image_url

    # Number of points that went into the correlation calculation
    attr_accessor :number_of_pairs

    # The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
    attr_accessor :onset_delay

    # Optimal Pearson Product
    attr_accessor :optimal_pearson_product

    # original name of the cause.
    attr_accessor :outcome_data_sources

    # HIGHER Remeron predicts HIGHER Overall Mood
    attr_accessor :predictor_explanation

    # Mike Sinn
    attr_accessor :principal_investigator

    # Value representing the significance of the relationship as a function of crowdsourced insights, predictive strength, data quantity, and data quality
    attr_accessor :qm_score

    # Correlation when cause and effect are reversed. For any causal relationship, the forward correlation should exceed the reverse correlation.
    attr_accessor :reverse_correlation

    # Using a two-tailed t-test with alpha = 0.05, it was determined that the change...
    attr_accessor :significance_explanation

    # A function of the effect size and sample size
    attr_accessor :statistical_significance

    # weak, moderate, strong
    attr_accessor :strength_level

    # These data suggest with a high degree of confidence...
    attr_accessor :study_abstract

    # In order to reduce suffering through the advancement of human knowledge...
    attr_accessor :study_background

    # This study is based on data donated by one QuantiModo user...
    attr_accessor :study_design

    # As with any human experiment, it was impossible to control for all potentially confounding variables...
    attr_accessor :study_limitations

    # Url for the interactive study within the web app
    attr_accessor :study_link_dynamic

    # Url for sharing the study on Facebook
    attr_accessor :study_link_facebook

    # Url for sharing the study on Google+
    attr_accessor :study_link_google

    # Url for sharing the study on Twitter
    attr_accessor :study_link_twitter

    # Url for sharing the statically rendered study on social media
    attr_accessor :study_link_static

    # The objective of this study is to determine...
    attr_accessor :study_objective

    # This analysis suggests that...
    attr_accessor :study_results

    # N1 Study HIGHER Remeron predicts HIGHER Overall Mood
    attr_accessor :study_title

    # Time at which correlation was calculated
    attr_accessor :timestamp

    # When the record in the database was last updated. Use UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"  datetime format. Time zone should be UTC and not local.
    attr_accessor :updated_at

    # User Vote
    attr_accessor :user_vote

    # cause value that predicts an above average effect value (in default unit for cause variable)
    attr_accessor :value_predicting_high_outcome

    # Overall Mood, on average, 34% HIGHER after around 3.98mg Remeron
    attr_accessor :value_predicting_high_outcome_explanation

    # cause value that predicts a below average effect value (in default unit for cause variable)
    attr_accessor :value_predicting_low_outcome

    # Overall Mood, on average, 4% LOWER after around 0mg Remeron
    attr_accessor :value_predicting_low_outcome_explanation


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'average_daily_low_cause' => :'averageDailyLowCause',
        :'average_daily_high_cause' => :'averageDailyHighCause',
        :'average_effect' => :'averageEffect',
        :'average_effect_following_high_cause' => :'averageEffectFollowingHighCause',
        :'average_effect_following_low_cause' => :'averageEffectFollowingLowCause',
        :'average_effect_following_high_cause_explanation' => :'averageEffectFollowingHighCauseExplanation',
        :'average_effect_following_low_cause_explanation' => :'averageEffectFollowingLowCauseExplanation',
        :'average_vote' => :'averageVote',
        :'causality_factor' => :'causalityFactor',
        :'cause' => :'cause',
        :'cause_variable_category_name' => :'causeVariableCategoryName',
        :'cause_changes' => :'causeChanges',
        :'cause_variable_combination_operation' => :'causeVariableCombinationOperation',
        :'cause_variable_image_url' => :'causeVariableImageUrl',
        :'cause_variable_ion_icon' => :'causeVariableIonIcon',
        :'cause_unit' => :'causeUnit',
        :'cause_variable_default_unit_id' => :'causeVariableDefaultUnitId',
        :'cause_variable_id' => :'causeVariableId',
        :'cause_variable_name' => :'causeVariableName',
        :'correlation_coefficient' => :'correlationCoefficient',
        :'created_at' => :'createdAt',
        :'data_analysis' => :'dataAnalysis',
        :'data_sources' => :'dataSources',
        :'duration_of_action' => :'durationOfAction',
        :'effect' => :'effect',
        :'effect_variable_category_name' => :'effectVariableCategoryName',
        :'effect_variable_image_url' => :'effectVariableImageUrl',
        :'effect_variable_ion_icon' => :'effectVariableIonIcon',
        :'effect_size' => :'effectSize',
        :'effect_variable_id' => :'effectVariableId',
        :'effect_variable_name' => :'effectVariableName',
        :'gauge_image' => :'gaugeImage',
        :'image_url' => :'imageUrl',
        :'number_of_pairs' => :'numberOfPairs',
        :'onset_delay' => :'onsetDelay',
        :'optimal_pearson_product' => :'optimalPearsonProduct',
        :'outcome_data_sources' => :'outcomeDataSources',
        :'predictor_explanation' => :'predictorExplanation',
        :'principal_investigator' => :'principalInvestigator',
        :'qm_score' => :'qmScore',
        :'reverse_correlation' => :'reverseCorrelation',
        :'significance_explanation' => :'significanceExplanation',
        :'statistical_significance' => :'statisticalSignificance',
        :'strength_level' => :'strengthLevel',
        :'study_abstract' => :'studyAbstract',
        :'study_background' => :'studyBackground',
        :'study_design' => :'studyDesign',
        :'study_limitations' => :'studyLimitations',
        :'study_link_dynamic' => :'studyLinkDynamic',
        :'study_link_facebook' => :'studyLinkFacebook',
        :'study_link_google' => :'studyLinkGoogle',
        :'study_link_twitter' => :'studyLinkTwitter',
        :'study_link_static' => :'studyLinkStatic',
        :'study_objective' => :'studyObjective',
        :'study_results' => :'studyResults',
        :'study_title' => :'studyTitle',
        :'timestamp' => :'timestamp',
        :'updated_at' => :'updatedAt',
        :'user_vote' => :'userVote',
        :'value_predicting_high_outcome' => :'valuePredictingHighOutcome',
        :'value_predicting_high_outcome_explanation' => :'valuePredictingHighOutcomeExplanation',
        :'value_predicting_low_outcome' => :'valuePredictingLowOutcome',
        :'value_predicting_low_outcome_explanation' => :'valuePredictingLowOutcomeExplanation'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'average_daily_low_cause' => :'Float',
        :'average_daily_high_cause' => :'Float',
        :'average_effect' => :'Float',
        :'average_effect_following_high_cause' => :'Float',
        :'average_effect_following_low_cause' => :'Float',
        :'average_effect_following_high_cause_explanation' => :'String',
        :'average_effect_following_low_cause_explanation' => :'String',
        :'average_vote' => :'Float',
        :'causality_factor' => :'Float',
        :'cause' => :'String',
        :'cause_variable_category_name' => :'String',
        :'cause_changes' => :'Integer',
        :'cause_variable_combination_operation' => :'String',
        :'cause_variable_image_url' => :'String',
        :'cause_variable_ion_icon' => :'String',
        :'cause_unit' => :'String',
        :'cause_variable_default_unit_id' => :'Integer',
        :'cause_variable_id' => :'Integer',
        :'cause_variable_name' => :'String',
        :'correlation_coefficient' => :'Float',
        :'created_at' => :'DateTime',
        :'data_analysis' => :'String',
        :'data_sources' => :'String',
        :'duration_of_action' => :'Float',
        :'effect' => :'String',
        :'effect_variable_category_name' => :'String',
        :'effect_variable_image_url' => :'String',
        :'effect_variable_ion_icon' => :'String',
        :'effect_size' => :'String',
        :'effect_variable_id' => :'String',
        :'effect_variable_name' => :'String',
        :'gauge_image' => :'String',
        :'image_url' => :'String',
        :'number_of_pairs' => :'Float',
        :'onset_delay' => :'Float',
        :'optimal_pearson_product' => :'Float',
        :'outcome_data_sources' => :'String',
        :'predictor_explanation' => :'String',
        :'principal_investigator' => :'String',
        :'qm_score' => :'Float',
        :'reverse_correlation' => :'Float',
        :'significance_explanation' => :'String',
        :'statistical_significance' => :'String',
        :'strength_level' => :'String',
        :'study_abstract' => :'String',
        :'study_background' => :'String',
        :'study_design' => :'String',
        :'study_limitations' => :'String',
        :'study_link_dynamic' => :'String',
        :'study_link_facebook' => :'String',
        :'study_link_google' => :'String',
        :'study_link_twitter' => :'String',
        :'study_link_static' => :'String',
        :'study_objective' => :'String',
        :'study_results' => :'String',
        :'study_title' => :'String',
        :'timestamp' => :'Float',
        :'updated_at' => :'DateTime',
        :'user_vote' => :'Float',
        :'value_predicting_high_outcome' => :'Float',
        :'value_predicting_high_outcome_explanation' => :'String',
        :'value_predicting_low_outcome' => :'Float',
        :'value_predicting_low_outcome_explanation' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'averageDailyLowCause')
        self.average_daily_low_cause = attributes[:'averageDailyLowCause']
      end

      if attributes.has_key?(:'averageDailyHighCause')
        self.average_daily_high_cause = attributes[:'averageDailyHighCause']
      end

      if attributes.has_key?(:'averageEffect')
        self.average_effect = attributes[:'averageEffect']
      end

      if attributes.has_key?(:'averageEffectFollowingHighCause')
        self.average_effect_following_high_cause = attributes[:'averageEffectFollowingHighCause']
      end

      if attributes.has_key?(:'averageEffectFollowingLowCause')
        self.average_effect_following_low_cause = attributes[:'averageEffectFollowingLowCause']
      end

      if attributes.has_key?(:'averageEffectFollowingHighCauseExplanation')
        self.average_effect_following_high_cause_explanation = attributes[:'averageEffectFollowingHighCauseExplanation']
      end

      if attributes.has_key?(:'averageEffectFollowingLowCauseExplanation')
        self.average_effect_following_low_cause_explanation = attributes[:'averageEffectFollowingLowCauseExplanation']
      end

      if attributes.has_key?(:'averageVote')
        self.average_vote = attributes[:'averageVote']
      end

      if attributes.has_key?(:'causalityFactor')
        self.causality_factor = attributes[:'causalityFactor']
      end

      if attributes.has_key?(:'cause')
        self.cause = attributes[:'cause']
      end

      if attributes.has_key?(:'causeVariableCategoryName')
        self.cause_variable_category_name = attributes[:'causeVariableCategoryName']
      end

      if attributes.has_key?(:'causeChanges')
        self.cause_changes = attributes[:'causeChanges']
      end

      if attributes.has_key?(:'causeVariableCombinationOperation')
        self.cause_variable_combination_operation = attributes[:'causeVariableCombinationOperation']
      end

      if attributes.has_key?(:'causeVariableImageUrl')
        self.cause_variable_image_url = attributes[:'causeVariableImageUrl']
      end

      if attributes.has_key?(:'causeVariableIonIcon')
        self.cause_variable_ion_icon = attributes[:'causeVariableIonIcon']
      end

      if attributes.has_key?(:'causeUnit')
        self.cause_unit = attributes[:'causeUnit']
      end

      if attributes.has_key?(:'causeVariableDefaultUnitId')
        self.cause_variable_default_unit_id = attributes[:'causeVariableDefaultUnitId']
      end

      if attributes.has_key?(:'causeVariableId')
        self.cause_variable_id = attributes[:'causeVariableId']
      end

      if attributes.has_key?(:'causeVariableName')
        self.cause_variable_name = attributes[:'causeVariableName']
      end

      if attributes.has_key?(:'correlationCoefficient')
        self.correlation_coefficient = attributes[:'correlationCoefficient']
      end

      if attributes.has_key?(:'createdAt')
        self.created_at = attributes[:'createdAt']
      end

      if attributes.has_key?(:'dataAnalysis')
        self.data_analysis = attributes[:'dataAnalysis']
      end

      if attributes.has_key?(:'dataSources')
        self.data_sources = attributes[:'dataSources']
      end

      if attributes.has_key?(:'durationOfAction')
        self.duration_of_action = attributes[:'durationOfAction']
      end

      if attributes.has_key?(:'effect')
        self.effect = attributes[:'effect']
      end

      if attributes.has_key?(:'effectVariableCategoryName')
        self.effect_variable_category_name = attributes[:'effectVariableCategoryName']
      end

      if attributes.has_key?(:'effectVariableImageUrl')
        self.effect_variable_image_url = attributes[:'effectVariableImageUrl']
      end

      if attributes.has_key?(:'effectVariableIonIcon')
        self.effect_variable_ion_icon = attributes[:'effectVariableIonIcon']
      end

      if attributes.has_key?(:'effectSize')
        self.effect_size = attributes[:'effectSize']
      end

      if attributes.has_key?(:'effectVariableId')
        self.effect_variable_id = attributes[:'effectVariableId']
      end

      if attributes.has_key?(:'effectVariableName')
        self.effect_variable_name = attributes[:'effectVariableName']
      end

      if attributes.has_key?(:'gaugeImage')
        self.gauge_image = attributes[:'gaugeImage']
      end

      if attributes.has_key?(:'imageUrl')
        self.image_url = attributes[:'imageUrl']
      end

      if attributes.has_key?(:'numberOfPairs')
        self.number_of_pairs = attributes[:'numberOfPairs']
      end

      if attributes.has_key?(:'onsetDelay')
        self.onset_delay = attributes[:'onsetDelay']
      end

      if attributes.has_key?(:'optimalPearsonProduct')
        self.optimal_pearson_product = attributes[:'optimalPearsonProduct']
      end

      if attributes.has_key?(:'outcomeDataSources')
        self.outcome_data_sources = attributes[:'outcomeDataSources']
      end

      if attributes.has_key?(:'predictorExplanation')
        self.predictor_explanation = attributes[:'predictorExplanation']
      end

      if attributes.has_key?(:'principalInvestigator')
        self.principal_investigator = attributes[:'principalInvestigator']
      end

      if attributes.has_key?(:'qmScore')
        self.qm_score = attributes[:'qmScore']
      end

      if attributes.has_key?(:'reverseCorrelation')
        self.reverse_correlation = attributes[:'reverseCorrelation']
      end

      if attributes.has_key?(:'significanceExplanation')
        self.significance_explanation = attributes[:'significanceExplanation']
      end

      if attributes.has_key?(:'statisticalSignificance')
        self.statistical_significance = attributes[:'statisticalSignificance']
      end

      if attributes.has_key?(:'strengthLevel')
        self.strength_level = attributes[:'strengthLevel']
      end

      if attributes.has_key?(:'studyAbstract')
        self.study_abstract = attributes[:'studyAbstract']
      end

      if attributes.has_key?(:'studyBackground')
        self.study_background = attributes[:'studyBackground']
      end

      if attributes.has_key?(:'studyDesign')
        self.study_design = attributes[:'studyDesign']
      end

      if attributes.has_key?(:'studyLimitations')
        self.study_limitations = attributes[:'studyLimitations']
      end

      if attributes.has_key?(:'studyLinkDynamic')
        self.study_link_dynamic = attributes[:'studyLinkDynamic']
      end

      if attributes.has_key?(:'studyLinkFacebook')
        self.study_link_facebook = attributes[:'studyLinkFacebook']
      end

      if attributes.has_key?(:'studyLinkGoogle')
        self.study_link_google = attributes[:'studyLinkGoogle']
      end

      if attributes.has_key?(:'studyLinkTwitter')
        self.study_link_twitter = attributes[:'studyLinkTwitter']
      end

      if attributes.has_key?(:'studyLinkStatic')
        self.study_link_static = attributes[:'studyLinkStatic']
      end

      if attributes.has_key?(:'studyObjective')
        self.study_objective = attributes[:'studyObjective']
      end

      if attributes.has_key?(:'studyResults')
        self.study_results = attributes[:'studyResults']
      end

      if attributes.has_key?(:'studyTitle')
        self.study_title = attributes[:'studyTitle']
      end

      if attributes.has_key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.has_key?(:'updatedAt')
        self.updated_at = attributes[:'updatedAt']
      end

      if attributes.has_key?(:'userVote')
        self.user_vote = attributes[:'userVote']
      end

      if attributes.has_key?(:'valuePredictingHighOutcome')
        self.value_predicting_high_outcome = attributes[:'valuePredictingHighOutcome']
      end

      if attributes.has_key?(:'valuePredictingHighOutcomeExplanation')
        self.value_predicting_high_outcome_explanation = attributes[:'valuePredictingHighOutcomeExplanation']
      end

      if attributes.has_key?(:'valuePredictingLowOutcome')
        self.value_predicting_low_outcome = attributes[:'valuePredictingLowOutcome']
      end

      if attributes.has_key?(:'valuePredictingLowOutcomeExplanation')
        self.value_predicting_low_outcome_explanation = attributes[:'valuePredictingLowOutcomeExplanation']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @cause.nil?
        invalid_properties.push("invalid value for 'cause', cause cannot be nil.")
      end

      if @correlation_coefficient.nil?
        invalid_properties.push("invalid value for 'correlation_coefficient', correlation_coefficient cannot be nil.")
      end

      if @duration_of_action.nil?
        invalid_properties.push("invalid value for 'duration_of_action', duration_of_action cannot be nil.")
      end

      if @effect.nil?
        invalid_properties.push("invalid value for 'effect', effect cannot be nil.")
      end

      if @number_of_pairs.nil?
        invalid_properties.push("invalid value for 'number_of_pairs', number_of_pairs cannot be nil.")
      end

      if @onset_delay.nil?
        invalid_properties.push("invalid value for 'onset_delay', onset_delay cannot be nil.")
      end

      if @timestamp.nil?
        invalid_properties.push("invalid value for 'timestamp', timestamp cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @cause.nil?
      return false if @correlation_coefficient.nil?
      return false if @duration_of_action.nil?
      return false if @effect.nil?
      return false if @number_of_pairs.nil?
      return false if @onset_delay.nil?
      return false if @timestamp.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          average_daily_low_cause == o.average_daily_low_cause &&
          average_daily_high_cause == o.average_daily_high_cause &&
          average_effect == o.average_effect &&
          average_effect_following_high_cause == o.average_effect_following_high_cause &&
          average_effect_following_low_cause == o.average_effect_following_low_cause &&
          average_effect_following_high_cause_explanation == o.average_effect_following_high_cause_explanation &&
          average_effect_following_low_cause_explanation == o.average_effect_following_low_cause_explanation &&
          average_vote == o.average_vote &&
          causality_factor == o.causality_factor &&
          cause == o.cause &&
          cause_variable_category_name == o.cause_variable_category_name &&
          cause_changes == o.cause_changes &&
          cause_variable_combination_operation == o.cause_variable_combination_operation &&
          cause_variable_image_url == o.cause_variable_image_url &&
          cause_variable_ion_icon == o.cause_variable_ion_icon &&
          cause_unit == o.cause_unit &&
          cause_variable_default_unit_id == o.cause_variable_default_unit_id &&
          cause_variable_id == o.cause_variable_id &&
          cause_variable_name == o.cause_variable_name &&
          correlation_coefficient == o.correlation_coefficient &&
          created_at == o.created_at &&
          data_analysis == o.data_analysis &&
          data_sources == o.data_sources &&
          duration_of_action == o.duration_of_action &&
          effect == o.effect &&
          effect_variable_category_name == o.effect_variable_category_name &&
          effect_variable_image_url == o.effect_variable_image_url &&
          effect_variable_ion_icon == o.effect_variable_ion_icon &&
          effect_size == o.effect_size &&
          effect_variable_id == o.effect_variable_id &&
          effect_variable_name == o.effect_variable_name &&
          gauge_image == o.gauge_image &&
          image_url == o.image_url &&
          number_of_pairs == o.number_of_pairs &&
          onset_delay == o.onset_delay &&
          optimal_pearson_product == o.optimal_pearson_product &&
          outcome_data_sources == o.outcome_data_sources &&
          predictor_explanation == o.predictor_explanation &&
          principal_investigator == o.principal_investigator &&
          qm_score == o.qm_score &&
          reverse_correlation == o.reverse_correlation &&
          significance_explanation == o.significance_explanation &&
          statistical_significance == o.statistical_significance &&
          strength_level == o.strength_level &&
          study_abstract == o.study_abstract &&
          study_background == o.study_background &&
          study_design == o.study_design &&
          study_limitations == o.study_limitations &&
          study_link_dynamic == o.study_link_dynamic &&
          study_link_facebook == o.study_link_facebook &&
          study_link_google == o.study_link_google &&
          study_link_twitter == o.study_link_twitter &&
          study_link_static == o.study_link_static &&
          study_objective == o.study_objective &&
          study_results == o.study_results &&
          study_title == o.study_title &&
          timestamp == o.timestamp &&
          updated_at == o.updated_at &&
          user_vote == o.user_vote &&
          value_predicting_high_outcome == o.value_predicting_high_outcome &&
          value_predicting_high_outcome_explanation == o.value_predicting_high_outcome_explanation &&
          value_predicting_low_outcome == o.value_predicting_low_outcome &&
          value_predicting_low_outcome_explanation == o.value_predicting_low_outcome_explanation
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [average_daily_low_cause, average_daily_high_cause, average_effect, average_effect_following_high_cause, average_effect_following_low_cause, average_effect_following_high_cause_explanation, average_effect_following_low_cause_explanation, average_vote, causality_factor, cause, cause_variable_category_name, cause_changes, cause_variable_combination_operation, cause_variable_image_url, cause_variable_ion_icon, cause_unit, cause_variable_default_unit_id, cause_variable_id, cause_variable_name, correlation_coefficient, created_at, data_analysis, data_sources, duration_of_action, effect, effect_variable_category_name, effect_variable_image_url, effect_variable_ion_icon, effect_size, effect_variable_id, effect_variable_name, gauge_image, image_url, number_of_pairs, onset_delay, optimal_pearson_product, outcome_data_sources, predictor_explanation, principal_investigator, qm_score, reverse_correlation, significance_explanation, statistical_significance, strength_level, study_abstract, study_background, study_design, study_limitations, study_link_dynamic, study_link_facebook, study_link_google, study_link_twitter, study_link_static, study_objective, study_results, study_title, timestamp, updated_at, user_vote, value_predicting_high_outcome, value_predicting_high_outcome_explanation, value_predicting_low_outcome, value_predicting_low_outcome_explanation].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
