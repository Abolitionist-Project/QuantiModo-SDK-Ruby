=begin
#QuantiModo

#QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::PairsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'PairsApi' do
  before do
    # run before each test
    @instance = SwaggerClient::PairsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PairsApi' do
    it 'should create an instact of PairsApi' do
      expect(@instance).to be_instance_of(SwaggerClient::PairsApi)
    end
  end

  # unit tests for v1_pairs_csv_get
  # Get pairs
  # Pairs cause measurements with effect measurements grouped over the duration of action after the onset delay.
  # @param cause Original variable name for the explanatory or independent variable
  # @param effect Original variable name for the outcome or dependent variable
  # @param [Hash] opts the optional parameters
  # @option opts [String] :access_token User&#39;s OAuth2 access token
  # @option opts [Integer] :user_id User&#39;s id
  # @option opts [String] :cause_source Name of data source that the cause measurements should come from
  # @option opts [String] :cause_unit Abbreviated name for the unit cause measurements to be returned in
  # @option opts [String] :delay The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
  # @option opts [String] :duration The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.
  # @option opts [String] :effect_source Name of data source that the effectmeasurements should come from
  # @option opts [String] :effect_unit Abbreviated name for the unit effect measurements to be returned in
  # @option opts [String] :end_time The most recent date (in epoch time) for which we should return measurements
  # @option opts [String] :start_time The earliest date (in epoch time) for which we should return measurements
  # @option opts [Integer] :limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
  # @option opts [Integer] :offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
  # @option opts [Integer] :sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
  # @return [Array<Pairs>]
  describe 'v1_pairs_csv_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_pairs_get
  # Get pairs
  # Pairs cause measurements with effect measurements grouped over the duration of action after the onset delay.
  # @param cause Original variable name for the explanatory or independent variable
  # @param effect Original variable name for the outcome or dependent variable
  # @param [Hash] opts the optional parameters
  # @option opts [String] :access_token User&#39;s OAuth2 access token
  # @option opts [Integer] :user_id User&#39;s id
  # @option opts [String] :cause_source Name of data source that the cause measurements should come from
  # @option opts [String] :cause_unit Abbreviated name for the unit cause measurements to be returned in
  # @option opts [String] :delay The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
  # @option opts [String] :duration The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.
  # @option opts [String] :effect_source Name of data source that the effectmeasurements should come from
  # @option opts [String] :effect_unit Abbreviated name for the unit effect measurements to be returned in
  # @option opts [String] :end_time The most recent date (in epoch time) for which we should return measurements
  # @option opts [String] :start_time The earliest date (in epoch time) for which we should return measurements
  # @option opts [Integer] :limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
  # @option opts [Integer] :offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
  # @option opts [Integer] :sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
  # @return [Array<Pairs>]
  describe 'v1_pairs_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
