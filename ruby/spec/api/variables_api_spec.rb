=begin
#QuantiModo

#QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::VariablesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'VariablesApi' do
  before do
    # run before each test
    @instance = SwaggerClient::VariablesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of VariablesApi' do
    it 'should create an instact of VariablesApi' do
      expect(@instance).to be_instance_of(SwaggerClient::VariablesApi)
    end
  end

  # unit tests for v1_public_variables_get
  # Get public variables
  # This endpoint retrieves an array of all public variables. Public variables are things like foods, medications, symptoms, conditions, and anything not unique to a particular user. For instance, a telephone number or name would not be a public variable.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :access_token User&#39;s OAuth2 access token
  # @option opts [Integer] :user_id User&#39;s id
  # @option opts [Integer] :id Common variable id
  # @option opts [String] :category Filter data by category
  # @option opts [String] :name Original name of the variable (supports exact name match only)
  # @option opts [String] :updated_at Filter by the last time any of the properties of the variable were changed. Uses UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;
  # @option opts [String] :source The name of the data source that created the variable (supports exact name match only). So if you have a client application and you only want variables that were last updated by your app, you can include the name of your app here
  # @option opts [String] :latest_measurement_time Filter variables based on the last time a measurement for them was created or updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;
  # @option opts [String] :number_of_raw_measurements Filter variables by the total number of measurements that they have. This could be used of you want to filter or sort by popularity.
  # @option opts [String] :last_source Limit variables to those which measurements were last submitted by a specific source. So if you have a client application and you only want variables that were last updated by your app, you can include the name of your app here. (supports exact name match only)
  # @option opts [Integer] :limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
  # @option opts [Integer] :offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
  # @option opts [Integer] :sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
  # @return [Variable]
  describe 'v1_public_variables_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_public_variables_search_search_get
  # Get top 5 PUBLIC variables with the most correlations
  # Get top 5 PUBLIC variables with the most correlations containing the entered search characters. For example, search for &#39;mood&#39; as an effect. Since &#39;Overall Mood&#39; has a lot of correlations with other variables, it should be in the autocomplete list.Supported filter parameters:&lt;ul&gt;&lt;li&gt;&lt;b&gt;category&lt;/b&gt; - Category of Variable&lt;/li&gt;&lt;/ul&gt;
  # @param search Search query can be some fraction of a variable name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :access_token User&#39;s OAuth2 access token
  # @option opts [Integer] :user_id User&#39;s id
  # @option opts [String] :variable_category_name Filter variables by category name. The variable categories include Activity, Causes of Illness, Cognitive Performance, Conditions, Environment, Foods, Location, Miscellaneous, Mood, Nutrition, Physical Activity, Physique, Sleep, Social Interactions, Symptoms, Treatments, Vital Signs, and Work.
  # @option opts [String] :source Specify a data source name to only return variables from a specific data source.
  # @option opts [String] :effect_or_cause Indicate if you only want variables that have user correlations. Possible values are effect and cause.
  # @option opts [String] :public_effect_or_cause Indicate if you only want variables that have aggregated correlations.  Possible values are effect and cause.
  # @option opts [Integer] :limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
  # @option opts [Integer] :offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
  # @option opts [Integer] :sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
  # @return [Variable]
  describe 'v1_public_variables_search_search_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_user_variables_delete_post
  # Delete All Measurements For Variable
  # Users can delete all of their measurements for a variable
  # @param variable_id Id of the variable whose measurements should be deleted
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1_user_variables_delete_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_user_variables_post
  # Update User Settings for a Variable
  # Users can change the parameters used in analysis of that variable such as the expected duration of action for a variable to have an effect, the estimated delay before the onset of action. In order to filter out erroneous data, they are able to set the maximum and minimum reasonable daily values for a variable.
  # @param user_variables Variable user settings data
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1_user_variables_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_user_variables_reset_post
  # Reset user settings for a variable to defaults
  # Reset user settings for a variable to defaults
  # @param variable_id Id of the variable that should be reset
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1_user_variables_reset_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_variable_categories_get
  # Variable categories
  # The variable categories include Activity, Causes of Illness, Cognitive Performance, Conditions, Environment, Foods, Location, Miscellaneous, Mood, Nutrition, Physical Activity, Physique, Sleep, Social Interactions, Symptoms, Treatments, Vital Signs, and Work.
  # @param [Hash] opts the optional parameters
  # @return [Array<VariableCategory>]
  describe 'v1_variable_categories_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_variables_get
  # Get variables with user&#39;s settings
  # Get variables for which the user has measurements. If the user has specified variable settings, these are provided instead of the common variable defaults.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :access_token User&#39;s OAuth2 access token
  # @option opts [Integer] :user_id User&#39;s id
  # @option opts [Integer] :id Common variable id
  # @option opts [String] :category Filter data by category
  # @option opts [String] :name Original name of the variable (supports exact name match only)
  # @option opts [String] :updated_at Filter by the last time any of the properties of the variable were changed. Uses UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;
  # @option opts [String] :source The name of the data source that created the variable (supports exact name match only). So if you have a client application and you only want variables that were last updated by your app, you can include the name of your app here
  # @option opts [String] :latest_measurement_time Filter variables based on the last time a measurement for them was created or updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;
  # @option opts [String] :number_of_raw_measurements Filter variables by the total number of measurements that they have. This could be used of you want to filter or sort by popularity.
  # @option opts [String] :last_source Limit variables to those which measurements were last submitted by a specific source. So if you have a client application and you only want variables that were last updated by your app, you can include the name of your app here. (supports exact name match only)
  # @option opts [Integer] :limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
  # @option opts [Integer] :offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
  # @option opts [Integer] :sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
  # @return [Variable]
  describe 'v1_variables_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_variables_post
  # Create Variables
  # Allows the client to create a new variable in the &#x60;variables&#x60; table.
  # @param body Original name for the variable.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :access_token User&#39;s OAuth2 access token
  # @option opts [Integer] :user_id User&#39;s id
  # @return [nil]
  describe 'v1_variables_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_variables_search_search_get
  # Get variables by search query
  # Get variables containing the search characters for which the currently logged in user has measurements. Used to provide auto-complete function in variable search boxes.
  # @param search Search query which may be an entire variable name or a fragment of one.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :access_token User&#39;s OAuth2 access token
  # @option opts [Integer] :user_id User&#39;s id
  # @option opts [String] :variable_category_name Filter variables by category name. The variable categories include Activity, Causes of Illness, Cognitive Performance, Conditions, Environment, Foods, Location, Miscellaneous, Mood, Nutrition, Physical Activity, Physique, Sleep, Social Interactions, Symptoms, Treatments, Vital Signs, and Work.
  # @option opts [BOOLEAN] :include_public Set to true if you would like to include public variables when no user variables are found.
  # @option opts [BOOLEAN] :manual_tracking Set to true if you would like to exlude variables like apps and website names.
  # @option opts [String] :source Specify a data source name to only return variables from a specific data source.
  # @option opts [String] :effect_or_cause Indicate if you only want variables that have user correlations. Possible values are effect and cause.
  # @option opts [String] :public_effect_or_cause Indicate if you only want variables that have aggregated correlations.  Possible values are effect and cause.
  # @option opts [Integer] :limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
  # @option opts [Integer] :offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
  # @return [Array<Variable>]
  describe 'v1_variables_search_search_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_variables_variable_name_get
  # Get info about a variable
  # Get all of the settings and information about a variable by its name. If the logged in user has modified the settings for the variable, these will be provided instead of the default settings for that variable.
  # @param variable_name Variable name
  # @param [Hash] opts the optional parameters
  # @option opts [String] :access_token User&#39;s OAuth2 access token
  # @option opts [Integer] :user_id User&#39;s id
  # @return [Variable]
  describe 'v1_variables_variable_name_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
