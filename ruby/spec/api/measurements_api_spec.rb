=begin
#QuantiModo

#QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::MeasurementsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'MeasurementsApi' do
  before do
    # run before each test
    @instance = SwaggerClient::MeasurementsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of MeasurementsApi' do
    it 'should create an instact of MeasurementsApi' do
      expect(@instance).to be_instance_of(SwaggerClient::MeasurementsApi)
    end
  end

  # unit tests for v1_measurement_sources_get
  # Get measurement sources
  # Returns a list of all the apps from which measurement data is obtained.
  # @param [Hash] opts the optional parameters
  # @return [MeasurementSource]
  describe 'v1_measurement_sources_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_measurement_sources_post
  # Add a data source
  # Add a life-tracking app or device to the QuantiModo list of data sources.
  # @param body An array of names of data sources you want to add.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :access_token User&#39;s OAuth2 access token
  # @option opts [Integer] :user_id User&#39;s id
  # @return [nil]
  describe 'v1_measurement_sources_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_measurements_daily_get
  # Get daily measurements for this user
  # Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten. Supported filter parameters:&lt;ul&gt;&lt;li&gt;&lt;b&gt;value&lt;/b&gt; - Value of measurement&lt;/li&gt;&lt;li&gt;&lt;b&gt;updatedAt&lt;/b&gt; - The time that this measurement was created or last updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;&lt;/li&gt;&lt;/ul&gt;
  # @param variable_name Name of the variable you want measurements for
  # @param [Hash] opts the optional parameters
  # @option opts [String] :access_token User&#39;s OAuth2 access token
  # @option opts [Integer] :user_id User&#39;s id
  # @option opts [String] :unit_abbreviated_name The unit your want the measurements in
  # @option opts [String] :start_time The lower limit of measurements returned (UTC Iso8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot; format)
  # @option opts [String] :end_time The upper limit of measurements returned (UTC Iso8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot; format)
  # @option opts [Integer] :grouping_width The time (in seconds) over which measurements are grouped together
  # @option opts [String] :grouping_timezone The time (in seconds) over which measurements are grouped together
  # @option opts [Integer] :limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
  # @option opts [Integer] :offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
  # @option opts [Integer] :sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
  # @return [Measurement]
  describe 'v1_measurements_daily_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_measurements_delete_post
  # Delete a measurement
  # Delete a previously submitted measurement
  # @param body The startTime and variableId of the measurement to be deleted.
  # @param [Hash] opts the optional parameters
  # @return [CommonResponse]
  describe 'v1_measurements_delete_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_measurements_get
  # Get measurements for this user
  # Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten. Supported filter parameters:&lt;ul&gt;&lt;li&gt;&lt;b&gt;value&lt;/b&gt; - Value of measurement&lt;/li&gt;&lt;li&gt;&lt;b&gt;updatedAt&lt;/b&gt; - The time that this measurement was created or last updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;&lt;/li&gt;&lt;/ul&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :access_token User&#39;s OAuth2 access token
  # @option opts [Integer] :user_id User&#39;s id
  # @option opts [Integer] :id Measurement id
  # @option opts [String] :variable_name Name of the variable you want measurements for
  # @option opts [String] :variable_category_name Name of the variable category you want measurements for
  # @option opts [String] :source_name ID of the source you want measurements for (supports exact name match only)
  # @option opts [String] :value Value of measurement
  # @option opts [String] :unit_abbreviated_name The unit you want the measurements returned in
  # @option opts [String] :earliest_measurement_time The lower limit of measurements returned in ISO 8601 format or epoch seconds (unixtime)
  # @option opts [String] :latest_measurement_time The upper limit of measurements returned in ISO 8601 format or epoch seconds (unixtime)
  # @option opts [String] :created_at The time the measurement record was first created in the format YYYY-MM-DDThh:mm:ss. Time zone should be UTC and not local.
  # @option opts [String] :updated_at The time the measurement record was last changed in the format YYYY-MM-DDThh:mm:ss. Time zone should be UTC and not local.
  # @option opts [Integer] :grouping_width The time (in seconds) over which measurements are grouped together
  # @option opts [String] :grouping_timezone The time (in seconds) over which measurements are grouped together
  # @option opts [Integer] :limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
  # @option opts [Integer] :offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
  # @option opts [Integer] :sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
  # @return [Measurement]
  describe 'v1_measurements_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_measurements_post
  # Post a new set or update existing measurements to the database
  # You can submit or update multiple measurements in a \&quot;measurements\&quot; sub-array.  If the variable these measurements correspond to does not already exist in the database, it will be automatically added.  The request body should look something like [{\&quot;measurements\&quot;:[{\&quot;startTime\&quot;:1439389320,\&quot;value\&quot;:\&quot;3\&quot;}, {\&quot;startTime\&quot;:1439389319,\&quot;value\&quot;:\&quot;2\&quot;}],\&quot;name\&quot;:\&quot;Acne (out of 5)\&quot;,\&quot;source\&quot;:\&quot;QuantiModo\&quot;,\&quot;category\&quot;:\&quot;Symptoms\&quot;,\&quot;combinationOperation\&quot;:\&quot;MEAN\&quot;,\&quot;unit\&quot;:\&quot;/5\&quot;}]
  # @param body An array of measurements you want to insert.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :access_token User&#39;s OAuth2 access token
  # @option opts [Integer] :user_id User&#39;s id
  # @return [nil]
  describe 'v1_measurements_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_measurements_range_get
  # Get measurements range for this user
  # Get Unix time-stamp (epoch time) of the user&#39;s first and last measurements taken.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sources Enter source name to limit to specific source (varchar)
  # @option opts [Integer] :user If not specified, uses currently logged in user (bigint)
  # @return [MeasurementRange]
  describe 'v1_measurements_range_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_measurements_update_post
  # Update a measurement
  # Delete a previously submitted measurement
  # @param body The id as well as the new startTime, note, and/or value of the measurement to be updated
  # @param [Hash] opts the optional parameters
  # @return [CommonResponse]
  describe 'v1_measurements_update_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v2_measurements_csv_get
  # Get Measurements CSV
  # Download a CSV containing all user measurements
  # @param [Hash] opts the optional parameters
  # @option opts [String] :access_token User&#39;s OAuth2 access token
  # @option opts [Integer] :user_id User&#39;s id
  # @return [File]
  describe 'v2_measurements_csv_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v2_measurements_request_csv_post
  # Post Request for Measurements CSV
  # Use this endpoint to schedule a CSV export containing all user measurements to be emailed to the user within 24 hours.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :access_token User&#39;s OAuth2 access token
  # @option opts [Integer] :user_id User&#39;s id
  # @return [Integer]
  describe 'v2_measurements_request_csv_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v2_measurements_request_pdf_post
  # Post Request for Measurements PDF
  # Use this endpoint to schedule a PDF export containing all user measurements to be emailed to the user within 24 hours.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :access_token User&#39;s OAuth2 access token
  # @option opts [Integer] :user_id User&#39;s id
  # @return [Integer]
  describe 'v2_measurements_request_pdf_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v2_measurements_request_xls_post
  # Post Request for Measurements XLS
  # Use this endpoint to schedule a XLS export containing all user measurements to be emailed to the user within 24 hours.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :access_token User&#39;s OAuth2 access token
  # @option opts [Integer] :user_id User&#39;s id
  # @return [Integer]
  describe 'v2_measurements_request_xls_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
